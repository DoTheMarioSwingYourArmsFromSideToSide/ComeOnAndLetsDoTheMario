var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");

// JavaScript Document

PGL.setUserStatus = function(code)
{
    PGL.DATA.options = [
        PGL.UTIL.getLocale("GLOSSARY_PRIVACY_SETTING_NOBODY"),
        PGL.UTIL.getLocale("GLOSSARY_PRIVACY_SETTING_FRIENDS"),
        PGL.UTIL.getLocale("GLOSSARY_PRIVACY_SETTING_MEMBERS"),
        PGL.UTIL.getLocale("GLOSSARY_PRIVACY_SETTING_EVERYONE")
    ]

    PGL.DATA.categories = {
        profile:PGL.UTIL.getLocale("GLOSSARY_ACCOUNT_OPENRANGE_SET"),
        gameSoft:PGL.UTIL.getLocale("GLOSSARY_CONTENT_USER_PROFILE"),
        friend:PGL.UTIL.getLocale("GLOSSARY_CONTENT_USER_FRIENDLIST"),
        timeline:PGL.UTIL.getLocale("GLOSSARY_CONTENT_USER_TIMELINE"),
        medal:PGL.UTIL.getLocale("GLOSSARY_CONTENT_USER_MEDAL"),
        gbu:PGL.UTIL.getLocale("GLOSSARY_CONTENT_BATTLE"),
        battleTeam:PGL.UTIL.getLocale("GLOSSARY_CONTENT_BATTLETEAM"),
        internetMatchup:PGL.UTIL.getLocale("GLOSSARY_CONTENT_COMPETITIONS"),
        friendlyCompetitions:PGL.UTIL.getLocale("GLOSSARY_CONTENT_FRIENDLY_COMPETITIONS"),
        deliveryRegulation:PGL.UTIL.getLocale("GLOSSARY_CONTENT_DELIVERY_REGULATION"),
        gts:PGL.UTIL.getLocale("GLOSSARY_CONTENT_USER_GTS"),
        photo:PGL.UTIL.getLocale("GLOSSARY_CONTENT_USER_PHOTO"),
        secretbase:PGL.UTIL.getLocale("GLOSSARY_CONTENT_USER_SECRETBASE")
    };

    // GUSヘッダー
    PGL.createGusHeader();

    // フッター生成
    PGL.createFooterModel();
    $("body").on("click",".logout",PGL.UTIL.logout);
    // 背景
    PGL.UTIL.setBackgroundImage();


    var romIds = [/*24,25,26,27,*/30,31,32,33];
    $.each(romIds, function() {
        var romId = parseInt(this,10);
        var logo = PGL.INFO.PATH.webResources + PGL.INFO.PATH.logo + 'logo_' + romId + '_' + PGL.INFO.LANGUAGE_ID + '.png';
        $('#rom-logo-' + romId).css({backgroundImage:'url('+logo+')'});
    });


    if (location.pathname.indexOf("/support/guide/")!=-1 ||
        location.pathname.indexOf("/regulation")!=-1 ||
        location.pathname.match(/\/dl-regulation\/([a-z0-9])+/)) {
        var png = "";
        switch(PGL.INFO.LOCATE){
            case "ja": png = "logo_ja.png"; break;
            case "fr": png = "logo_fr.png"; break;
            default: png = "logo_default.png"; break;
        }

        var close = {
            ja:"とじる",
            en:"Close",
            fr:"Fermer",
            it:"Chiudi",
            de:"Schließen",
            es:"Cerrar",
            ko:"닫기"
        }
        var closeBtn = (location.pathname.indexOf("/regulation")!=-1) ? close[PGL.INFO.LOCATE] : PGL.UTIL.getLocale("GLOSSARY_ACTION_CLOSE")
        var markup =
            [
                '<div id="headerIn" class="regulation">',
                '<h1><a><img src="'+PGL.INFO.PATH.cmsUploads+'/share/images/'+png+'" width="120" /></a></h1>',
                ((location.pathname.indexOf("dl-regulation")!=-1)
               ? '<p><a class="btnGrSmall" href="/dl-regulation/">'+PGL.UTIL.getLocale("F-DR-01-01_BACK_TO_LIST")+'</a></p>'
               : '<p><a class="btnGrSmall close">'+closeBtn+'</a></p>'
                ),
                '</div>'
            ]
        $("header").html(markup.join(''));
        $("header .close").on("click",function(){
            window.close();
        })
    }
    else{
        code = code||0;
        var logo = "";
        switch(PGL.INFO.LANGUAGE_ID){
            case 1: logo = "ja"; break;
            case 3: logo = "fr"; break;
            default: logo = "default"; break;
        }

        switch(PGL.DATA.GET_LOGIN_STATUS.loginStatus){
            case "0":
            case "1":
                var logoName =  "logo_";
                break;
            default: var logoName = "logo_xy_"; break;
        }

        var $builder = $('<div id="headerIn"></div>');
        var $logo = $('<h1/>').append($($('<a/>').attr({"href": '/'})).append($('<img/>').attr({"src":PGL.INFO.PATH.cmsUploads+'/share/images/'+logoName+logo+'.png'}))).appendTo($builder);
        switch(code)
        {
            case 0:
            var listArr = [3,10,4,11,12,5,6,7];//4がインターネット大会
            PGL.setMenuList(listArr).appendTo($builder);//メニュー追加
            $builder.appendTo("header");
            break;

            case 1:
            $builder.find('a>img').unwrap();
            $builder.appendTo("header");
            break;

            case 2:
            PGL.setHeaderProfile().appendTo($builder);//プロフィール追加
            var listArr = [0,3,10,4,11,12,5,6,7,8,9]; //4がインターネット大会
            PGL.setMenuList(listArr).appendTo($builder);//メニュー追加
            $builder.appendTo("header");
            break;

            default:
            break;
        }
    }

    $('#headerNavigation>p').on('click', function () {
        $('#headerNavigation').toggleClass('open', !$(this).next().is(':visible'));
    });
    $('body').on('mousedown', function (e) {
        if (!$(e.target).parents().andSelf().is('#headerNavigation')) {
            $('#headerNavigation').removeClass('open');
        }
    });

    // issue:0002877,0001549
    if (PGL.UTIL.isDeviceMust3DS() && !PGL.UTIL.isDeviceMustNew3DS()) { // 確実に3DSなら /requirement へ, New3DSはSPサイトヘ
        if (location.pathname != '/requirement/') location = '/requirement/';
        // location = PGL.INFO.PATH.sp.replace(/3ds-sp/, '3ds-3ds') + location.pathname + location.search + location.hash;
    } else if (PGL.UTIL.isDeviceMustSP() || PGL.UTIL.isDeviceMustNew3DS()) { // 確実にspならspサイトへ, New3DSもSPサイトへ
        location = PGL.INFO.PATH.sp + location.pathname + location.search + location.hash;
    } else if (PGL.UTIL.isDeviceMaySP()) { // spと思われる場合は提案
        if ($.cookie('skip-device-nav') != 'true') {
            $('<div id="device-specific-site-nav"></div>').prependTo('body');
            $('<a></a>').cmsText('GLOSSARY_SWITCH_TO_SP_SITE')
                        .attr({ href:PGL.INFO.PATH.sp + location.pathname + location.search + location.hash }).appendTo('#device-specific-site-nav');
            $('<a class="close">×</a>').appendTo('#device-specific-site-nav').on('click', function () {
                $('body').animate({ 'margin-top':0 }, 150);
                $.cookie('skip-device-nav', 'true');
            });
            $('body').animate({ 'margin-top':33 }, 150);
        }
    }

    //
    PGL.setRomColor();
}


PGL.setRomColor = function () {

    var romName = {'24':'x','25':'y','26':'as','27':'or','30':'s','31':'m','32':'us','33':'um'};
    /* load rom less */
    var romStyleFile = PGL.INFO.PATH.webResources+"/pc/common/css/theme/color_theme_default.css";
    if (PGL.DATA.SD) {
        if (PGL.DATA.SD.romId !== void 0) {
            romStyleFile = PGL.INFO.PATH.webResources+"/pc/common/css/theme/color_theme_" + romName[PGL.DATA.SD.romId] + ".css";
        }
    }
    /*
       var romStyle  = document.createElement('link');
       romStyle.rel  = "stylesheet";
       romStyle.type = "text/css";
       romStyle.href = romStyleFile;
       less.sheets.push(romStyle);
       less.refresh();
     */
    var romStyle  = $('<link/>');
    romStyle.attr('rel', "stylesheet");
    romStyle.attr('type', "text/css");
    romStyle.attr('href', romStyleFile + '?rev=3.2');
    $('head').append(romStyle);

};

//Menu生成
PGL.setMenuList = function(listArr) {
    var navigationObj = [
        {title:PGL.UTIL.getLocale("GLOSSARY_CONTENT_MYPAGE"),category:"user"},
        {title:PGL.UTIL.getLocale("GLOSSARY_CONTENT_JOURNAL"),category:"journal"},
        {title:PGL.UTIL.getLocale("GLOSSARY_CONTENT_MILEAGE"),category:"mileage"},
        {title:PGL.UTIL.getLocale("GLOSSARY_CONTENT_BATTLE"),category:"battle"},
        {title:PGL.UTIL.getLocale("GLOSSARY_CONTENT_COMPETITIONS"),category:"competitions"},
        {title:PGL.UTIL.getLocale("GLOSSARY_CONTENT_INFORMATION"),category:"information"},
        {title:PGL.UTIL.getLocale("GLOSSARY_CONTENT_CALENDER"),category:"calendar"},
        {title:PGL.UTIL.getLocale("GLOSSARY_CONTENT_SUPPORT"),category:"support"},
        {title:PGL.UTIL.getLocale("GLOSSARY_CONTENT_SETTINGS"),category:"settings",className:"account"},
        {title:PGL.UTIL.getLocale("GLOSSARY_LOGOUT"),category:"javascript:void(0)",className:"logout"},
        {title:PGL.UTIL.getLocale("GLOSSARY_CONTENT_BATTLETEAM"),category:"rentalteam"},
        {title:PGL.UTIL.getLocale("GLOSSARY_CONTENT_FRIENDLY_COMPETITIONS"),category:"friendlycompetitions"},
        {title:PGL.UTIL.getLocale("GLOSSARY_CONTENT_DELIVERY_REGULATION"),category:"dl-regulation"}
    ];
    var $nav = $("<nav/>").attr("id","headerNavigation").append($('<p/>').text(PGL.UTIL.getLocale('GLOSSARY_TOP_MENU')));
    var $ul = $("<ul/>").appendTo($nav);
    $.each(listArr, function(i,v) {
        var $li = $("<li/>").append("<a/>");
        var linkPass;
        if (navigationObj[v].category=="user") {
            linkPass = "/"+navigationObj[v].category+"/"+PGL.DATA.SD.memberSavedataIdCode+"/profile/";
        } else {
            linkPass = "/"+navigationObj[v].category+"/";
        }
        if (navigationObj[v].className != null) {
            $li.addClass(navigationObj[v].className);
            if (navigationObj[v].className =="logout") {
                linkPass = navigationObj[v].category;
            }
        }
        var $a = $("a",$li).attr("href",linkPass);
        $a.squeeze(navigationObj[v].title);
        $ul.append($li);
    });
    return $nav;
}

//ヘッダー表示プロフィール生成
PGL.setHeaderProfile = function () {
    var logo = PGL.INFO.PATH.webResources + PGL.INFO.PATH.logo + 'logo_' + PGL.DATA.SD.romId + '_' + PGL.INFO.LANGUAGE_ID + '.png';
    var $box = $('<div></div>').trainerBox(PGL.DATA.SD).css({ 'background-image':'url(' + logo + ')' });
    $('<div class="lastGameSyncDate"></div>').append(
        $('<div class="value"></div>').text(PGL.UTIL.getDateTime(PGL.DATA.SD.lastGameSyncDate))
    ).appendTo($box);
    return $box;


    var data = PGL.DATA.GET_LOGIN_STATUS.selectedSavedata;
    var $profile = $("<div/>").attr("id","profile").append($("<p/>").addClass("logo")).append($("<p/>").addClass("trainerIcon")).append($("<dl/>").append("<dt/>").append("<dd/>").append("<dd/>")).append($("<p/>").addClass("countryCode"));
    $(PGL.UTIL.logoImg(data.romId)).appendTo($(".logo",$profile));
    $(PGL.UTIL.tranerImg(data.savedataId)).appendTo($(".trainerIcon",$profile));
    $("dt",$profile).text(data.trainerName);
    $($("dd",$profile).get(0)).text(data.memberSavedataIdCode);
    $($("dd",$profile).get(1)).text(PGL.UTIL.getDateTime(data.lastGameSyncDate));
    $(".countryCode",$profile).text(data.countryCode);
    return $profile;
}

PGL.selectGameId = function(data){
    PGL.DIALOG.selectGameId(data);
}

PGL.createGusHeader = function () {
    if (PGL.INFO.REGION != PGL.ENUM.REGION.JP &&
        PGL.INFO.REGION != PGL.ENUM.REGION.KR
    ) {
        // issue:0002896
        var lang = PGL.DATA.GET_LOGIN_STATUS.loginStatus == 0 ? PGL.UTIL.getSelectedLanguage() : PGL.UTIL.getSiteRelatedLanguage();
        var langCode = { '2':'en', '3':'fr-fr', '4':'it-it', '5':'de-de', '7':'es-es', '9':'en', '10':'en' }[ lang ];

        if (langCode == 'en' && PGL.INFO.REGION == PGL.ENUM.REGION.US) {
            langCode += '-us';
        } else if (langCode == 'en' && PGL.INFO.REGION != PGL.ENUM.REGION.US) {
            langCode += '-uk';
        }
        /*
           } else if (langCode == 'fr' && PGL.INFO.REGION == PGL.ENUM.REGION.US) {
           langCode += '-ca';
           } else if (langCode == 'es' && PGL.INFO.REGION == PGL.ENUM.REGION.US) {
           langCode += '-la';
           }
         */
        if (typeof langCode != 'undefined') {
            if (PGL.INFO.PATH.gusApi) {
                var gusApi = PGL.INFO.PATH.gusApi;
            } else {
                var gusApi = 'https://web.archive.org/web/20190205183551/https://www.pokemon.com/api/gus/';
            }
            $('<link rel="stylesheet" href="//web.archive.org/web/20190205183551/https://assets.pokemon.com/static2/_ui/css/gus.css" media="all" type="text/css"/>').prependTo(document.body);
            $('<script type="text/javascript" src="//web.archive.org/web/20190205183551/https://assets.pokemon.com/static2/_ui/js/gus.js"></script>').prependTo(document.body);
            var iid = setInterval(function () {
                if ($.fn.GlobalUtilityStrip) {
                    clearInterval(iid);
                    $('body').addClass('gus-embedded').prepend(
                        $('<div class="pokemon-gus-container" data-site="pgl" data-locale="en-us" data-api="' + gusApi + '" data-width="940px"></div>')
                    );
                    $('.pokemon-gus-container').data('locale', langCode);
                    $('.pokemon-gus-container').GlobalUtilityStrip();
                }
            }, 10);
        }
    }
};

PGL.createFooterModel = function () {
    var footer = PGL.UTIL.getFooter();

    var $section = $('<section></section>').appendTo('footer');
    var $ulList = $('<ul class="linkList"></ul>').appendTo($section);

    $.each(footer.links.concat($.makeArray(footer.network_status)), function (index, link) {
        $('<li/>').addClass('footer-link-' + link.type)
                  .append($('<a/>').attr({ href:link.url, target:isSameDomain(link.url) ? '_self' : '_blank' })
                                   .text(link.label)).appendTo($ulList);
    });

    var $copyright = $('<p />').addClass("copyright");
    $.each(footer.copyright.split('\n'), function (index, text) {
        if(index == 3) {
            $('<p/>').addClass('line'+index).text(text).appendTo($copyright);
        }else{
            $copyright.append(text);
        }
    });
    $copyright.appendTo($section);

    // $('<p class="copyright"/>').text(footer.copyright).appendTo($section);

    var $ulBanner = $('<ul class="banner"></ul>').appendTo($section);
    $.each(footer.badges, function (index, badge) {
        var li = $('<li/>').addClass('footer-badge-' + badge.type)
                           .append($('<img/>').attr({ src:PGL.INFO.PATH.cmsUploads+'/share/images/footer/' + badge.type + '.png' }));
        if (badge.url.length > 0) {
            li.wrapInner($('<a/>').attr({ href:badge.url, target:isSameDomain(badge.url) ? '_self' : '_blank' }));
        }
        li.appendTo($ulBanner);
    });

    //$('<p id="btnLang"></p>').append($("<a></a>").attr({href:"https://web.archive.org/web/20190205183551/http://dev2.pokemon-gl.com/"}).text("地域・言語選択")).appendTo($section);

    $('<p class="footerBtn"/>').appendTo($section).on('click', function(){
        $('html,body').animate({ scrollTop: 0 }, 'fast');
    });

    function isSameDomain(url) {
        return url.charAt(0) == '/';
    }
};

PGL.UTIL.getUrlSlice = function (category, index) {
    var p = location.pathname.split('/');
    var i = p.indexOf(category);
    return i != -1 ? p[i + index] : '';
};

PGL.UTIL.getSeasonSummary = function (season) {
    var l1 = PGL.UTIL.getDateTimeS(season.seasonStartDate);
    var l2 = PGL.UTIL.getDateTimeS(season.seasonEndDate);
    var u1 = PGL.UTIL.getDateTimeS(season.seasonStartDateUtc);
    var u2 = PGL.UTIL.getDateTimeS(season.seasonEndDateUtc);
    return [
        season.seasonName,
        PGL.UTIL.concatDateAndTZ(dateSpan(l1, l2), season.timezoneName),
        PGL.UTIL.concatDateAndTZ(dateSpan(u1, u2), 'UTC')
    ].join('　');
    function dateSpan(a, b) {
        return a + ' - ' + b;
    }
};


PGL.UTIL.setBackgroundImage = function() {
    $("#contents").css({'z-index':4});
    var contentsBg = $('<div id="contentsBg"/>');
    $('#wrapper').append(contentsBg);
    contentsBg.delay(200).fadeIn(300);
}

$.fn.extend({
    // issue:0001120,0001215,0001605,0001580
    gsidcInput: function () {
        var forwardFocus = function ($input) {
            if ($input.nextAll('input').length) {
                var v = $input.nextAll('input:first').val();
                $input.nextAll('input:first').val($input.val()).insertBefore($input);
                $input.nextAll('span:first').insertBefore($input);
                $input.val(v).focus();
            }
        };
        var backwardFocus = function ($input) {
            if ($input.prevAll('input').length) {
                var v = $input.prevAll('input:first').val();
                $input.prevAll('input:first').val($input.val()).insertAfter($input);
                $input.prevAll('span:first').insertAfter($input);
                $input.val(v).focus();
            }
        };

        var lastInput;
        this.on('input', 'input', function (event) {
            lastInput = $(this).val().replace(/[Ａ-Ｚａ-ｚ０-９]/g, function (s) { return String.fromCharCode(s.charCodeAt() - 0xFEE0); }).replace(/\W/g, '').toUpperCase();
            var component = lastInput.substr(0, 4);
            if ($(this).val() != component) {
                $(this).val(component);
            }
            if (component.length == 4) {
                forwardFocus($(this));
            }
        });
        this.on('keydown', 'input', function (event) {
            if (event.keyCode == 39) {
                if (this.selectionStart >= 4) {
                    forwardFocus($(this));
                    return false;
                }
            } else if (event.keyCode == 37 || event.keyCode == 8) {
                if (this.selectionStart == 0 && this.selectionEnd == 0) {
                    backwardFocus($(this));
                    return false;
                }
            }
        });
        this.on('paste', 'input', function (event) {
            var $self = $(this).attr({ maxlength:'' });
            var index = $self.parent().children('input').index($self);
            setTimeout(function () {
                $self.attr({ maxlength:4 });
                $self = $self.parent().children('input').eq(index);
                var remains = lastInput;
                while (remains.length && $self.length) {
                    $self.val(remains.substr(0, 4));
                    remains = remains.substr(4);
                    $self = $self.nextAll('input:first');
                    $self.focus();
                }
            }, 1);
        });
        return this;
    },

    //
    saveDataIdcInput: function () {
        var index;

        var forwardFocus = function ($input) {
            index = $input.parent().children('input').index($input);
            if (index < 3) {
                var next = $input.parent().children('input').eq(index+1);
                next.focus();
            }
        };
        var backwardFocus = function ($input) {
            index = $input.parent().children('input').index($input);
            if (index > 0) {
                var prev = $input.parent().children('input').eq(index-1);
                prev.focus();
            }
        };

        var lastInput;

        this.on('input', 'input', function (event) {
            lastInput = $(this).val().replace(/[Ａ-Ｚａ-ｚ０-９]/g, function (s) { return String.fromCharCode(s.charCodeAt() - 0xFEE0); }).replace(/\W/g, '').toUpperCase();
            var size = $(this).attr('maxlength');
            var component = lastInput.substr(0, size);
            if ($(this).val() != component) {
                $(this).val(component);
            }
            if (component.length == size) {
                forwardFocus($(this));
            }
        });
        this.on('keydown', 'input', function (event) {
            if (event.keyCode == 39) {
                if (this.selectionStart >= 4) {
                    forwardFocus($(this));
                    return false;
                }
            } else if (event.keyCode == 37 || event.keyCode == 8) {
                if (this.selectionStart == 0 && this.selectionEnd == 0) {
                    backwardFocus($(this));
                    return false;
                }
            }
        });
        this.on('paste', 'input', function (event) {
            var size = $(this).attr('maxlength') || 1;
            var $self = $(this).attr({ maxlength:'' });
            // var index = $self.parent().children('input').index($self);
            // lastInput = $(this).val().replace(/[Ａ-Ｚａ-ｚ０-９]/g, function (s) { return String.fromCharCode(s.charCodeAt() - 0xFEE0); }).replace(/\W/g, '').toUpperCase();
            setTimeout(function () {
                var remains = lastInput;
                $self.parent().find('input').each(function() {
                    var s = $(this).attr('maxlength') || size;
                    var str = remains.substr(0, s);
                    if (str) {
                        $(this).val(str);
                        remains = remains.substr(s);
                    }
                });
                $("#sdid0").attr({maxlength: 1});
                $("#sdid1").attr({maxlength: 3});
                $("#sdid2").attr({maxlength: 4});
                $("#sdid3").attr({maxlength: 1});
            }, 1);
        });
        return this;
    },

    // issue:0001300
    // ご利用登録、登録解除申請、ポイント移動等で使う
    // ソフトロゴや最終ゲームシンク日時を含むボックスです
    // 該当箇所では必ずこの関数を呼び出すようにしてください
    // 表示上のバリエーション（ご利用登録のSTEP4では地域無し、
    // ポイント移動ではボーダーに色がつく等）は、
    // ページ固有のCSSで行います
    savedataBox: function (savedata, options) {
        options = options || {};
        var logo = PGL.INFO.PATH.webResources + PGL.INFO.PATH.logo + 'logo_' + savedata.romId + '_' + savedata.languageId + '.png';
        this.addClass('savedataBox rom-' + savedata.romId).addClass(options.vertical ? 'vertical' : 'horizontal').empty().css({ 'background-image':'url(' + logo + ')' });
        var $gameInfo = $('<div class="gameInfo"></div>').appendTo(this);
        $('<div class="gameSyncIdCode"></div>').append(
            $('<div class="label"></div>').text(PGL.UTIL.getLocale('GLOSSARY_GAME_SYNC_ID_CODE')),
            $('<div class="value"></div>').text(savedata.gameSyncIdCode)
        ).appendTo($gameInfo);
        $('<div class="lastGameSyncDate"></div>').append(
            $('<div class="label"></div>').text(PGL.UTIL.getLocale('GLOSSARY_LAST_SYNCED_DATETIME')),
            $('<div class="value"></div>').text(PGL.UTIL.getDateTime(savedata.lastGameSyncDate))
        ).appendTo($gameInfo);
        $('<div></div>').trainerBox(savedata).appendTo(this);
        return this;
    },

    // savedataBoxやランキング等で使われるトレーナー情報です
    // 該当箇所では必ずこの関数を呼び出すようにしてください
    // 表示上のバリエーションが多いため、
    // CSSは最低限の共通化だけを行いますが
    // HTML構造は共通のものを使います
    trainerBox: function (savedata) {
        return this.each(function (index, element) {
            $(element).addClass('trainerBox').toggleClass('trainerBoxLinked', !!savedata.memberSavedataIdCode).empty();
            $(PGL.UTIL.tranerImg(savedata.savedataId)).addClass('trainerIcon').appendTo(this);
            var savedataIdCode = savedata.memberSavedataIdCode || savedata.savedataIdCode || null;
            if (savedata.countryCode) { /* && savedataIdCode */
                $('<div class="countryCode"></div>').text(savedata.countryCode).appendTo(this);
            }
            if (savedata.trainerNameRuby && savedata.trainerNameRuby != savedata.trainerName) {
                $('<div class="trainerNameRuby"></div>').text(savedata.trainerNameRuby).appendTo(this);
            }
            $('<div class="trainerName"/>').appendTo(this).squeeze(savedata.trainerName);
            if (savedataIdCode) {
                $('<div class="savedataIdCode"></div>').text(savedataIdCode).appendTo(this);
            }
            /*
               $('<div class="user-not-found"/>').append($('<p/>').cmsText('GLOSSARY_USER_NOT_FOUND').squeeze()).appendTo(this);
             */
        });
    },

    /**
     * ご利用登録などで使うStepリスト
     */
    stepList: function (labels, activeIndex, inline) {
        var labelBase = inline ? 'GLOSSARY_STEP' : 'GLOSSARY_ACCOUNT_STEP0';
        return this.each(function (index, element) {
            $(element).addClass('steps').toggleClass('steps-inline', !!inline);
            $.each(labels, function (index2, summary) {
                $('<li></li>').toggleClass('active', index2 == activeIndex).append(
                    $('<span class="name"/>').text(PGL.UTIL.getLocale(labelBase + (index2 + 1))),
                    $('<span class="summary"/>').squeeze(PGL.UTIL.getLocale(summary))
                ).appendTo(element);
            });
        });
    },

    /**
     * ポケマイルポイント等の桁ごとの表示
     * @param  {Number}  point      ポケマイルポイント
     * @param  {Number}  length     表示する桁数（デフォルトは11）
     * @param  {Boolean} isCurrency 通貨かどうか（デフォルトはtrue）
     */
    digits: function (point, length, isCurrency) {
        if (length == undefined) {
            length = 11;
        }
        if (isCurrency == undefined) {
            isCurrency = true;
        }
        return this.each(function (index, element) {
            $(element).empty();
            var chars = ('\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0' + PGL.UTIL.addComma(point, isCurrency)).substr(-length);
            $.each(chars.split(''), function (index, char) {
                $('<span/>').text(char.replace(' ', '\xA0')).toggleClass('section', /[ \.,]/.test(char)).appendTo(element);
            });
        });
    },

    /**
     * ポケマイルポイント等の桁ごとの表示（暫定）
     * @param  {String} text 表示文字列
     */
    digits2: function (text) {
        return this.each(function (index, element) {
            $(element).empty();
            $.each(text.split(''), function (index, char) {
                var className = /[ \.,]/.test(char) ? 'delimiter' : 'digit';
                $('<span/>').text(char.replace(' ', '\xA0')).addClass(className).appendTo(element);
            });
        });
    },

    /**
     * $('#target').dialog(options)
     * $('#target').dialog('resize')
     * $('#target').dialog('remove')
     *
     * 現状のダイアログとの互換性を優先したため、show/hideは無く、使い捨てです。
     */
    dialog: function (option) {
        // issue:0001970
        $('body').off('focusin').on('focusin', function (e) {
            var $dialog = $('.dialog');
            if ($dialog.length) {
                if (!$(e.target).parents().andSelf().is('.dialog')) {
                    $dialog.last().focus();
                }
            }
        });

        return this.each(function (index, element) {
            var $this = $(this);
            if (typeof option == 'string') {
                if (option == 'resize') {
                    /*
                       var y = (window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;
                       var dy = Math.max(10, y + (window.innerHeight - $this.height()) / 2);
                     */
                    if ($(window).height() > $this.height()) {
                        var dy = ($(window).height() - $this.height())/2 + $(document).scrollTop();
                    } else {
                        var dy = $(document).scrollTop() + 10;
                    }
                    var o =  $('body').height() - (dy + $this.height());
                    if (o <= 0) dy = dy + o - 20;
                    var m = $(document).height();
                    dy = Math.max(10, dy);
                    dy = Math.min(dy, m - $this.height());
                    $this.css({ 'margin-left':$this.data('dialog').width * -0.5, top:dy });
                    if (o <= 0) $('body').scrollTop(dy-10);
                } else if (option == 'remove') {
                    $this.parents('.overlay').remove();
                }
            } else if (typeof option == 'object') {
                var options;
                if ($this.data('dialog')) {
                    // update
                    options = option;
                    $this.data('dialog', $.extend({}, $this.data('dialog'), option));
                } else {
                    if (option.mutex) {
                        var $prev = $('.dialog').filter(function (index, elem) {
                            return $(elem).data('dialog').mutex == option.mutex;
                        });
                        if ($prev.length) {
                            return;
                        }
                    }

                    // create
                    options = $.extend({}, { title:'', content:'<div></div>', width:840, closable:true, buttons:null }, option);
                    $this.data('dialog', options);

                    $this.addClass('dialog');
                    $this.children().is('.headBox') || $('<div class="headBox"><span class="title"></span><button class="close"></button></div>').prependTo($this);
                    $this.children().is('.bodyBox') || $('<div class="bodyBox"></div>').appendTo($this);
                    $this.children().is('.footerBox') || $('<div class="footerBox"></div>').appendTo($this);
                    $this.find('.close').on('click', function () {
                        var event = $.Event('close');
                        $this.trigger(event);
                        if (!event.isDefaultPrevented()) {
                            $this.dialog('remove');
                        }
                    });
                    if (!$this.parent().is('.overlay')) {
                        var $overlay = $('<div class="overlay"></div>').append($this).appendTo('body');
                        // Chromeの表示不具合対策
                        $overlay.css({ visibility:'hidden' });
                        setTimeout(function () {
                            $overlay.css({ visibility:'' });
                            $this.attr('tabindex', -1).focus();
                        }, 1);
                    }
                }

                if (options.width != null) {
                    $this.css({ width:options.width });
                }
                if (options.title != null) {
                    $this.find('.headBox .title').text(options.title);
                }
                if (options.content != null) {
                    $(options.content).appendTo($this.find('.bodyBox').empty());
                }
                if (options.buttons != null) {
                    $this.children('.footerBox').empty();
                    $.each(options.buttons, function (index, button) {
                        $('<a></a>')
                            .attr({ 'class':button.className })
                            .addClass(button.primary ? 'btnCrLarge' : 'btnGrLarge')
                            .text(button.text)
                            .click(function () { button.click.apply($this, arguments); })
                            .appendTo($this.children('.footerBox'));
                    });
                }
                if (options.closable != null) {
                    $this.toggleClass('closable', options.closable);
                }

                $this.dialog('resize');
            }
        });
    },

    /**
     * SNSボタンを表示する
     * @param  {Array} availableSnsList 有効なSNSのリスト（getMypageCommonなどで取得できるsns配列）
     * @param  {Object} data            SNSに渡るメッセージ等を格納した構造体
     */
    showSnsButtons: function (availableSnsList, data) {
        var $this = $(this).empty();
        $.each(availableSnsList || [], function (index, sns) {
            var $li = $('<li><a target="_blank"/></li>').addClass('sns-' + sns.snsType).appendTo($this);
            if (sns.snsType == 0) {
                var url = 'https://web.archive.org/web/20190205183551/https://www.facebook.com/sharer/sharer.php?' + $.param({
                    u:data.url
                });
            } else if (sns.snsType == 1) {
                var url = 'https://web.archive.org/web/20190205183551/https://twitter.com/intent/tweet?' + $.param({
                    url:data.url, text:data.description, hashtags:'pgl', count:'none'
                });
            }
            $li.find('a').attr({ href:url }).on('click', function () {
                window.open(url, '_blank', 'width=600,height=300');
                return false;
            });
        });
    },

    /**
     * 写真をsrcに設定する。読み込みが失敗した場合、photo-errorで自身を置き換える
     * @param  {String} photoId 写真のID
     */
    photo: function (photoId) {
        return this.each(function (index, element) {
            $(element).addClass('photo').attr({ src:PGL.INFO.PATH.photo + photoId + '.jpeg' }).on('error', function () {
                $(this).wrap('<div class="photo-error"></div>').parent().text(PGL.UTIL.getLocale('GLOSSARY_PHOTO_NOT_EXISTS'));
            });
        });
    }
});


(function () {

    $.fn.extend({
        /**
         * 画面内に表示されるとロードを開始するためのエレメント
         * @param  {Function} func このエレメントが画面に表示された時に呼び出される関数
         *                         Deferredオブジェクトを返してください
         */
        autopager: function (func) {
            var loadIndex = 0;
            return this.each(function (index, elem) {
                $(elem).addClass('autopager');
                var intervalId = setInterval(function () {
                    // もしエレメントが表示されており、ロード中ではなく
                    if ($(elem).is(':visible') && !$(elem).is('.loading')) {
                        // ウィンドウの下端がエレメント上端を越してたら
                        if ($(window).scrollTop() + $(window).height() > $(elem).offset().top) {
                            // ロード中にする
                            $(elem).addClass('loading').cmsText('GLOSSARY_LOADING');
                            // ロード開始
                            func(loadIndex).done(function (completed) {
                                if (completed) {
                                    // 完全終了
                                    $(elem).remove();
                                    clearInterval(intervalId);
                                } else {
                                    // ロード終了
                                    $(elem).removeClass('loading').text('');
                                }
                                loadIndex++;
                            });
                        }
                    }
                }, 100);
            });
        },

        tabList: function () {
            return this.each(function (index, elem) {
                $(elem).on('click', 'li', function () {
                    if ($(this).is(':not(.active)')) {
                        var href = $(this).find('a:first-child').attr('href');
                        $(this).addClass('active').siblings().removeClass('active');
                        $('.tabPane').filter(href).addClass('active').siblings().removeClass('active');
                    }
                    return false;
                });
            });
        }
    });
})();


}
/*
     FILE ARCHIVED ON 18:35:51 Feb 05, 2019 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 02:49:11 Apr 30, 2023.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 71.944
  exclusion.robots: 0.061
  exclusion.robots.policy: 0.053
  RedisCDXSource: 0.55
  esindex: 0.006
  LoadShardBlock: 53.922 (3)
  PetaboxLoader3.datanode: 93.787 (5)
  load_resource: 114.305 (2)
  PetaboxLoader3.resolve: 68.4 (2)
*/