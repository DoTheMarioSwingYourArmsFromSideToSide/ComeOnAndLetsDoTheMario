var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");

/**
 * @preserve
 * @date      Thu Nov 07 2019 15:57:18 GMT-0500 (Eastern Standard Time)
 * @time      1573160240735
 * @brand     chevrolet
 * @version   0.0.0

 * Copyright (c) 2019 General Motors Corp. All Rights Reserved.
 * This material is solely and exclusively owned by General Motors and may not
 * be reproduced elsewhere without prior written approval.

 */
;;(function($, Tc) {
	/**
	 * Atomic
	 * @namespace gmwp.mod.Atomic
	 * @description Atomic is a design structure for creating complete web pages out of individual
	 * html elements. It combines individual html elements into larger working systems called components
	 * that can be used in the creation and organization of templates to create fully functional and
	 * interactive web pages. The Atomic class is used to create and redefine methods provided by TerrificJS
	 * to fit the needs of our platform. This allows us the flexibility to rename TerrificJS functions and
	 * delegate the order in which global methods are executed on page load.
	 *
	 * @author GMIT
	 */
	gmwp.mod.Atomic = Tc.Module.extend({
		/**
		 * @description This overwrites the default 'on' event from TerrificJS in order to perform
		 * a specific set of calls for each module.
		 *
		 * Each module should use the 'prepare' method instead of using 'on'.
		 * @memberOf gmwp.mod.Atomic
		 */
		on: function(callback) {
			this.delegateEvents();
			this.prepare();
			this.prepareAsync(callback);
		},

		/**
		 * @description This is run before the modules are initialized and creates a handler
		 * for the events declared in each module instance on the page.
		 *
		 * This is done as an alternative to writing out an event handler inside
		 * of each module.
		 *
		 * When delegateEvents runs it will setup an event handler for each module instance and
		 * in the case of the above code it will tell the module to fire it's 'onClick' method when
		 * body element is clicked or it's 'onLinkClick' method when an element with the classname
		 * 'q-image-link' is selected.
		 *
		 * @example
		 * 	// Instead of declaring:
		 * 	// WRONG:	this.$ctx.on('click', '.q-my-class', onClick());
		 *	// inside of each module, we declare:
		 *      events: {
		 *          click: {
		 *	         	callback: 'onClick',
		 *	          	selector: 'body'
		 *          }
		 *      }
		 * 	// ... or for events with different callbacks for different
		 *  // selectors we could declare:
		 *      events: {
		 *		    click: [{
		 *		     	callback: 'onClick',
		 *		       	selector: 'body'
		 *	         }, {
		 *	         	callback: 'onLinkClick',
		 *	          	selector: '.q-image-link'
		 *	         }]
		 *	    }
		 *
		 * @memberOf gmwp.mod.Atomic
		 */
		delegateEvents: function() {
			var self = this,
				config = self.sandbox.config,
				setupEvent = function(key) {
					var events = gmwp.util.isArray(this) ? this : [this];

					$.each(events, function() {
						var method = self[this.callback],
							selector = this.selector || null,
							eventName;

						if (!method) {
							return true;
						}

						eventName = key + '.delegateEvents' + self.id;
						self.$ctx.on(eventName, selector, function(e) {
							var $target = $(e.currentTarget);

							// jscs:disable maximumLineLength
							if (!$target.closest('.' + config.modPrefix).is(self.$ctx) &&
								!$target.parent().closest('.' + config.modPrefix).is(self.$ctx)) {
								return;
							}
							// jscs:enable maximumLineLength

							method.call(self, e);
						});
					});
				};

			if (this.events) {
				$.each(this.events, setupEvent);
			}
		},

		/**
		 * Selects only in its own module-scope
		 * @memberOf gmwp.mod.Atomic
		 */
		$: function(selector) {
			return this.$ctx.find(selector).filter($.proxy(function(index, item) {
				var $mod = $(item).closest('.' + self.sandbox.config.modPrefix);

				return $mod.is(this.$ctx) || !$mod.length;
			}, this));
		},

		prepare: function() {
		},

		prepareAsync: function(callback) {
			callback();
		},

		/**
		 * Each module should use the {@link gmwp.mod.Atomic.finish|finish} method
		 * instead of using 'after'.
		 * This overwrites the default 'after' event from TerrificJS.
		 * @memberOf gmwp.mod.Atomic
		 * @deprecated
		 */
		after: function() {
			this.finish();
		},

		/**
		 * This will run once all modules have been initialized on page.
		 * @memberOf gmwp.mod.Atomic
		 */
		finish: function() {
		},

		/**
		 * Subscribe - Shorthand for Atomic's subscribe function, without the use of `sandbox`
		 * @memberOf gmwp.mod.Atomic
		 * @param  {String|Number} channel Module name or module Id
		 * @param  {Object} context Usually this or self
		 */
		subscribe: function(channel, context) {
			this.sandbox.subscribe(channel, context);
		},

		publish: function(channel, context) {
			this.sandbox.subscribe(channel, context);
		}
	});
})(gmwp.$, gmwp.Tc);

;(function($) {
	/**
	 * AtomicMod
	 * @namespace gmwp.mod.AtomicMod
	 * @description AtomicMod extends the Atomic class and initializes each TerrificJS module.
	 * This is used to subscribe each module to globally broadcasted events within the current page's
	 * sandboxed scope. It is also where methods provided by TerrificJS are expanded upon to ensure their
	 * functionality aligns with our sites design. The ability to reshape the provided TerrificJS methods
	 * creates a safeguard for retaining the structure and performance of our site despite any versioning
	 * changes made to method names or operations that may occur within TerrificJS. Because each module
	 * object we crate is an extension of AtomicMod, it is important to note that each one is required to
	 * have both an 'initElements' and a 'prepare' method declared inside of them.
	 *
	 * @author GMIT
	 */
	gmwp.mod.AtomicMod = gmwp.mod.Atomic.extend({
		events: {
			/**
			 * Example:
			 * click: {
			 *   selector: '.btn-dialog',
			 * 	 method: 'triggerDialog'
			 * }
			 */
		},

		/**
		 * The init that all modules inherit
		 * @param  {Object} $ctx
		 * @param  {objcet} sandbox
		 * @param  {string} modId
		 * @memberOf gmwp.mod.AtomicMod
		 */
		init: function($ctx, sandbox, modId) {
			var moduleName;

			// Call base constructor
			this._super($ctx, sandbox, modId);

			moduleName = gmwp.util.getModuleName($ctx);
			/**
			 * All of the configurations extended from <code>gmwp.conf.cmp</code> are accessed <b>inside</b> the component with <code>this.cfg</code>. Components can access another components configuration with <code>gmwp.conf.cmp.&lt;moduleName>.&lt;property></code> from <b>outside</b> the component.
			 * @namespace gmwp.conf.cmp
			 */
			this.cfg = $.extend(this.cfg || {}, gmwp.conf.cmp[moduleName] || {});

			this.events = $.extend({}, this.events, gmwp.mod.AtomicMod.prototype.events);

			// This is required to hook up the events from the Global mod
			this.subscribe('broadcast', this);

			this.publish(moduleName, modId);

			// Add this back in once all modules are updated to not have this.
			// gmwp.util.debugModule(this);
		},

		/**
		 * This overwrites the default 'on' event from TerrificJS in order to perform
		 * a specific set of calls for each module.
		 *
		 * Each module should use the 'prepare' method instead of using 'on'.
		 * @deprecated
		 * @memberOf gmwp.mod.AtomicMod
		 */
		on: function(callback) {
			this.delegateEvents();
			this.initElements();
			this.prepare();
			this.prepareAsync(callback);
		},

		initElements: function() {
		},

		/**
		 * Subscribe - Shorthand for Atomic's subscribe function, without the use of `sandbox`
		 * @memberOf gmwp.mod.Atomic
		 * @param  {String|Number} channel Module name or module Id
		 * @param  {Object} context Usually this or self
		 */
		subscribe: function(channel, context) {
			this.sandbox.subscribe(channel, context);
		},

		publish: function(moduleName, modId) {
			this.sandbox.subscribe(moduleName, this);
			this.sandbox.subscribe(modId, this);
		}
	});
})(gmwp.$);

;(function($) {
	/**
	 * Global module that is used for triggering global events for ALL
	 * modules. This module also contains events on DOM elements, such
	 * as <code>window</code> and <code>foundation</code>.
	 * @namespace gmwp.mod.Global
	 * @description Global is used to describe how global page events are fired and broadcast those
	 * events to all other modules.
	 *
	 * @author GMIT
	 */
	gmwp.mod.Global = gmwp.mod.Atomic.extend({
		/**
		 * This initializes the global Window settings and subscribes to a global sandbox
		 * @memberOf gmwp.mod.Global
		 */
		init: function($ctx, sandbox, modId) {
			// Call base constructor
			this._super($ctx, sandbox, modId);

			gmwp.util.debug('-- LOADING MODULE: Global :: ' + modId + ' --');

			this.publish('broadcast', this);

			// Used to notify our components to hold-on updating the UI when
			// the user zooms in on mobile.
			this.moreDots = true;

			// Put this subscribe in global so that it is always watching
			// since gallery_layer opens in a modal
			this.publish('gallery_layer', this);

			this.windowSizes = ['medium', 'large', 'xlarge', 'xxlarge'];
			this.windowSizeCompare = '';
			this.lastWindowSizeCompare = '';
			this.gestureTimeout = -1;
			// Initialize the windowWidth to 0 so that resize code is triggered properly
			// when the page is first loaded.
			this.windowHeight = 0;
			this.windowWidth = 0;
		},

		/**
		 * The global prepare converts browser window events into our custom GMWP events.
		 * @memberOf gmwp.mod.Global
		 * @listens external:resize
		 * @listens external:scroll
		 * @listens external:orientationchange
		 * @listens external:hashchange
		 */
		prepare: function() {
			var throttledWindowResize = gmwp.util.debounce($.proxy(this.onWindowResize, this), 100),
				throttledWindowScroll = gmwp.util.throttle($.proxy(this.onWindowScroll, this), 100);

			gmwp.dom.$window
				/**
				 * <img src="https://web.archive.org/web/20200107071040/https://quantum.share.gm.com/PublishingImages/gmwp_event_listening.png"> Resize Event <p>Will debounce the resize event. Most browsers will send many resize events for every part of the resize movement. Our {@link gmwp.mod.Global.onWindowResize|onWindowResize} is debounced so that our JS isn't updating unnecessarily.</p>
				 * @external resize
				 * @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events/resize|MDN resize Event}
				 * @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events|MDN Event Reference}
				 * @see  gmwp.mod.Global.onWindowResize
				 * @property {boolean} isTrigger
				 */
				.on('resize', throttledWindowResize)
				/**
				 * <img src="https://web.archive.org/web/20200107071040/https://quantum.share.gm.com/PublishingImages/gmwp_event_listening.png"> Scroll Event. <p>Will throttle the scroll event. Most browsers will send many scroll events for every scroll movement. Our {@link gmwp.mod.Global.onWindowScroll|onWindowScroll} is throttled so that our JS isn't updating unnecessarily.</p>
				 * @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events/scroll|MDN scroll Event}
				 * @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events|MDN Event Reference}
				 * @see  gmwp.mod.Global.onWindowScroll
				 * @external scroll
				 */
				.on('scroll', throttledWindowScroll)
				/**
				 * <img src="https://web.archive.org/web/20200107071040/https://quantum.share.gm.com/PublishingImages/gmwp_event_listening.png"> Orientation Change Event
				 * @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events/orientationchange|MDN orientationchange Event}
				 * @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events|MDN Event Reference}
				 * @see  gmwp.mod.Global.onOrientationChange
				 * @external orientationchange
				 */
				.on('orientationchange', $.proxy(this.onOrientationChange, this))
				/**
				 * <img src="https://web.archive.org/web/20200107071040/https://quantum.share.gm.com/PublishingImages/gmwp_event_listening.png"> Hash Change Event
				 * @see  {@link https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent|MDN hashchange Event}
				 * @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events|MDN Event Reference}
				 * @see  gmwp.mod.Global.onHashChange
				 * @external hashchange
				 */
				.on('hashchange', $.proxy(this.onHashChange, this))
				/**
				 * <img src="https://web.archive.org/web/20200107071040/https://quantum.share.gm.com/PublishingImages/gmwp_event_listening.png"> Key Up Event
				 * @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events/keyup|MDN keyup Event}
				 * @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events|MDN Event Reference}
				 * @see  gmwp.mod.Global.onKeyUp
				 * @external keyup
				 */
				.on('keyup', $.proxy(this.onKeyUp, this))
				/**
				 * @see  gmwp.mod.Global.onBrightcoveAPIReady
				 */
				.on('brightcoveAPIReady', $.proxy(this.onBrightcoveAPIReady, this));

			// Used for catching global event from YouTube API
			window.onYouTubeIframeAPIReady = $.proxy(this.onYouTubeIframeAPIReady, this);
		},

		/**
		 * Global finish
		 * @memberOf gmwp.mod.Global
		 * @listens external:click
		 * @listens external:afterheightchangefndtnequalizer
		 * @listens external:beforeheightchangefndtnequalizer
		 * @fires external:resize
		 * @fires gmwp.mod.Global#broadcastEqualizerAfterChange
		 * @fires gmwp.mod.Global#broadcastEqualizerBeforeChange
		 * @fires gmwp.mod.Global#broadcastFoundationPreload
		 * @fires gmwp.mod.Global#broadcastFoundationLoad
		 */
		finish: function() {
			var self = this,
				hashRegex = new RegExp('^#' + gmwp.conf.ui.foundation.tab.hash_prefix + '(.*)'),
				onGentureStart = function() {
						this.moreDots = false;
						clearTimeout(self.gestureTimeout);
					},
				onGestureEnd = function(e) {
						e.preventDefault();
						self.gestureTimeout = setTimeout(function() {
							// More DOTS!
							this.moreDots = true;
							// See: http://bit.ly/2mtpEQM
						}, 60);
						// 60 miliseconds, don't want to take up more than a
						// few frames before allowing broadcast scroll to trigger
					},
				onEqualizerAfterChange = function() {
					/**
					 * Does not pass on an event from foundation when this fires. It will watch for the Foundation 'after-height-change' event for the Equalizer
					 * @event gmwp.mod.Global#broadcastEqualizerAfterChange
					 */
					self.fire('broadcastEqualizerAfterChange', ['broadcast']);
				},
				onEqualizerBeforeChange = function() {
					/**
					 * Does not pass on an event from foundation when this fires, It will watch for the Foundation 'before-height-change' event for the Equalizer
					 * @event gmwp.mod.Global#broadcastEqualizerBeforeChange
					 */
					self.fire('broadcastEqualizerBeforeChange', ['broadcast']);
				},
				findHash = function() {
					try {
						$(window.location.hash)[0].scrollIntoView();
						self.fire('broadcastScrollToElement', ['broadcast']);
					} catch (e) {
						gmwp.util.warn('Invalid anchor:', window.location.hash);
					}
				},
				confirmLeavingSite = function(evt) {
					var el = evt.target,
					regepr = new RegExp(/^https?|^\/\//),
					popup = Boolean($('.q-popup-text-box').data('displaypopup'));

					if (popup) {
						while (el) {
							if (el.nodeName === 'A' && el.target === '_blank') {
								if (el.href.endsWith('#') || !regepr.test($(el).attr('href')) ||
										$(el).data('popup') === false) {
									if (el.href.endsWith('#')) {
										$(el).attr('data-popup', 'false');
										el.href = el.href.slice(0, -1);
									}
								} else {
									evt.preventDefault();
									self.fire('externalSite', { event: evt, url: el.href }, ['broadcast']);
								}
							}
							el = el.parentNode;
						}
					} else {
						if (el.nodeName === 'A' && el.target === '_blank' && el.href &&
								regepr.test($(el).attr('href')) && el.href.endsWith('#')) {
							el.href = el.href.slice(0, -1);
						}
					}
				};

			/**
			 * Remove hash_prefix character from URL hash so that page will scroll to
			 * correct content on page.
			 *
			 * Only replace the hash if there was a hash in the URL. IE will add '#' to the
			 * URL if you set window.location.hash to an empty string.
			 */
			if (window.location.hash) {
				window.location.hash = window.location.hash.replace(hashRegex, '$1');
				setTimeout(findHash, 1);
			}

			/**
			 * This adds a custom event to tell components that Foundation is being loaded.
			 * @event gmwp.mod.Global#broadcastFoundationPreload
			 */
			this.fire('broadcastFoundationPreload', ['broadcast']);

			gmwp.dom.$document.foundation(gmwp.conf.ui.foundation);

			/**
			 * This adds a custom event to tell components that Foundation has been loaded.
			 * @event gmwp.mod.Global#broadcastFoundationLoad
			 */
			this.fire('broadcastFoundationLoad', ['broadcast']);

			gmwp.dom.$document
				/**
				* <img src="https://web.archive.org/web/20200107071040/https://quantum.share.gm.com/PublishingImages/gmwp_event_listening.png"> Before height change fndtn equalizer Event, <code>'before-height-change.fndtn.equalizer'</code>. Watch for the Foundation 'before-height-change' event for the Equalizer
				* @see  {@link http://foundation.zurb.com/sites/docs/v/5.5.3/components/equalizer.html#callbacks|Foundation Equalizer}
				 * @see  gmwp.mod.Global.onEqualizerBeforeChange
				* @external beforeheightchangefndtnequalizer
				*/
				.on(
					'before-height-change.fndtn.equalizer',
					gmwp.util.throttle($.proxy(onEqualizerBeforeChange, this), 100)
				)
				/**
				 * <img src="https://web.archive.org/web/20200107071040/https://quantum.share.gm.com/PublishingImages/gmwp_event_listening.png"> After height change fndtn equalizer Event, <code>'after-height-change.fndtn.equalizer'</code>. Watch for the Foundation 'after-height-change' event for the Equalizer
				 * @see  {@link http://foundation.zurb.com/sites/docs/v/5.5.3/components/equalizer.html#callbacks|Foundation Equalizer}
				 * @see  gmwp.mod.Global.onEqualizerAfterChange
				 * @external afterheightchangefndtnequalizer
				 */
				.on(
					'after-height-change.fndtn.equalizer',
					gmwp.util.throttle($.proxy(onEqualizerAfterChange, this), 100)
				)
				// Fire `broadcastBodyClick` event
				/**
				 * <img src="https://web.archive.org/web/20200107071040/https://quantum.share.gm.com/PublishingImages/gmwp_event_listening.png">  Click Event <p>Click is on the Document. Will fire `broadcastBodyClick` event</p>
				 * @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events/click|MDN click Event}
				 * @see  gmwp.mod.Global.onBodyClick
				 * @external click
				 */
				.on(
					'click',
					$.proxy(this.onBodyClick, this)
				);

			// This is to prevent crashes on iOS. When zooming on iPhone 7,
			// the tab will crash sometimes. We believe it's due to memory
			// issues with scrolling being fired so much.
			if (gmwp.util.isTouch()) {
				gmwp.dom.$document
					/*
					* <img src="../assets/img/GMWP_Event_Listening.png"> gestureStart Event
					* @external gestureStart
					* @see  {@link https://developer.apple.com/reference/webkitjs/gestureevent|Apple API Reference}
					* @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events|MDN Event Reference}
					*/
					.on('gesturestart', onGentureStart)
					/**
					 * <img src="../assets/img/GMWP_Event_Listening.png"> gestureEnd Event
					 * @external gestureEnd
					 * @see  {@link https://developer.apple.com/reference/webkitjs/gestureevent|Apple API Reference}
					 * @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events|MDN Event Reference}
					 */
					.on('gestureend', onGestureEnd);
			}

			gmwp.dom.$window.trigger('resize');
			gmwp.util.setLocationFromCookie();
			document.body.addEventListener('click', confirmLeavingSite, { capture: true });
		},

		/**
		 * Handler for window resize events. Will broadcast the window resize
		 * events using terrific `fire`.
		 * This contains the single event object that is defined on a Window resize
		 * @memberOf gmwp.mod.Global
		 * @listens external:resize
		 * @param  {external:resize} e Event passed in, used to see how this
		 * was triggered, and passes the event on when broadcasting
		 * @fires gmwp.mod.Global#broadcastBeforeWindowResize
		 * @fires gmwp.mod.Global#broadcastWindowResize
		 * @fires gmwp.mod.Global#broadcastAfterWindowResize
		 * @fires gmwp.mod.Global#broadcastBreakpointChange
		 * @fires external:scroll
		 */
		onWindowResize: function(e) {
			var arrWindowSizes = [],
				codeTrigger = e.isTrigger,
				setResizeCompare = function(size) {
					arrWindowSizes.push(gmwp.util.isWindowSize(size));
				};

			if (this.windowWidth !== gmwp.util.viewportWidth ||
				this.windowHeight !== gmwp.util.windowHeight ||
				codeTrigger) {
				this.windowHeight = gmwp.util.windowHeight;
				this.windowWidth = gmwp.util.viewportWidth;

				gmwp.dom.$window.trigger('scroll');

				// Force loading of images on IE when added dynamically to the page - See More: TFS Bug 463370
				window.picturefill();

				/**
				 * All three of these will fire at the same time, just use onWindowResize
				 * @event gmwp.mod.Global#broadcastBeforeWindowResize
				 */
				this.fire('broadcastBeforeWindowResize', { event: e }, ['broadcast']);
				/**
				 * All three of these will fire at the same time, just use onWindowResize
				 * @event gmwp.mod.Global#broadcastWindowResize
				 */
				this.fire('broadcastWindowResize', { event: e }, ['broadcast']);
				/**
				 * All three of these will fire at the same time, just use onWindowResize
				 * @event gmwp.mod.Global#broadcastAfterWindowResize
				 */
				this.fire('broadcastAfterWindowResize', { event: e }, ['broadcast']);

				// Build the comparison string based on current window size
				this.windowSizes.forEach(setResizeCompare);
				this.windowSizeCompare = 'sizes-' + arrWindowSizes.join('-');

				if (codeTrigger || this.windowSizeCompare !== this.lastWindowSizeCompare) {
					/**
					 * This will fire when there is a breakpoint change, breakpoints are defined by foundation
					 * @event gmwp.mod.Global#broadcastBreakpointChange
					 */
					this.fire('broadcastBreakpointChange', { event: e }, ['broadcast']);
				}

				this.lastWindowSizeCompare = this.windowSizeCompare;
			}
		},
		/**
		 * Was there a click on the body of the page?
		 * @memberOf gmwp.mod.Global
		 * @listens external:click
		 * @fires gmwp.mod.Global#broadcastBodyClick
		 * @param {external:click} e Click event passed in
		 */
		onBodyClick: function(e) {
			// Firefox bugfix to only trigger on click events for left mouse clicks
			if (e.type !== 'touchend' && e.which === 1) {
				/**
				 * Fire this event if it was a true 'click' event
				 * @event gmwp.mod.Global#broadcastBodyClick
				 */
				this.fire('broadcastBodyClick', { event: e }, ['broadcast']);
			}
		},

		/**
		 * This contains the single event object that is defined on a Window Scroll
		 * @memberOf gmwp.mod.Global
		 * @listens external:scroll
		 * @fires gmwp.mod.Global#broadcastWindowScroll
		 * @param {external:scroll} e Event passed in
		 */
		onWindowScroll: function(e) {
			// Will only broadcast when not zooming on mobile
			if (this.moreDots) {
				/**
				 * Did the window scroll? This triggers our GMWP window scroll event, that all components should listen for. There are exceptions, such as the jquery.gwmp.sticky plugin.
				 * @event gmwp.mod.Global#broadcastWindowScroll
				 * @type {object}
				 */
				this.fire('broadcastWindowScroll', { event: e }, ['broadcast']);
			}
		},

		/**
		 * Orientation Change
		 * This contains the single event object that is defined on a Window orientation change
		 * @memberOf gmwp.mod.Global
		 * @listens external:orientationchange
		 * @fires gmwp.mod.Global#broadcastOrientationChange
		 * @param {external:orientationchange} e Event passed in
		 */
		onOrientationChange: function(e) {
			/**
			 * Did the device change orientation?
			 * @event gmwp.mod.Global#broadcastOrientationChange
			 */
			this.fire('broadcastOrientationChange', { event: e }, ['broadcast']);
		},
		/**
		 * Hash Change
		 * This contains the single event object that is defined on a Window Hash change
		 * @memberOf gmwp.mod.Global
		 * @listens external:hashchange
		 * @fires gmwp.mod.Global#broadcastHashChange
		 * @param {external:hashchange} e Event passed in
		 * @example
		 * // Changing from:
		 * // http://www.gm.com/index.html#chevrolet
		 * // To:
		 * // http://www.gm.com/index.html#cadillac
		 */
		onHashChange: function(e) {
			/**
			 * Hash is the string at the end of the URI that begins with the "#" symbol.
			 * @event gmwp.mod.Global#broadcastHashChange
			 */
			this.fire('broadcastHashChange', { event: e }, ['broadcast']);
		},

		/**
		 * Trigger a global event based on the key that was pressed.
		 * @memberOf gmwp.mod.Global
		 * @listens external:keyup
		 * @fires gmwp.mod.Global#broadcastKeyEsc
		 * @fires gmwp.mod.Global#broadcastKeyEnter
		 * @fires gmwp.mod.Global#broadcastKeyTab
		 * @fires gmwp.mod.Global#broadcastKeyLeftArrow
		 * @fires gmwp.mod.Global#broadcastKeyRightArrow
		 * @param {external:keyup} e Event passed in
		 */
		onKeyUp: function(e) {
			switch (e.keyCode) {
				case gmwp.conf.events.keyCode.ESC:
					/**
					 * Will fire an event if the ESC (i.e. keycode <code>27</code> defined in <code>gmwp.conf</code>) key was pressed
					 * @see gmwp.conf
					 * @event gmwp.mod.Global#broadcastKeyEsc
					 */
					this.fire('broadcastKeyEsc', { event: e }, ['broadcast']);
					break;

				case gmwp.conf.events.keyCode.ENTER:
					/**
					 * Will fire an event if the ENTER (i.e. keycode <code>13</code> defined in <code>gmwp.conf</code>) key was pressed
					 * @see gmwp.conf
					 * @event gmwp.mod.Global#broadcastKeyEnter
					 */
					this.fire('broadcastKeyEnter', { event: e }, ['broadcast']);
					break;

				case gmwp.conf.events.keyCode.TAB:
					/**
					 * Will fire an event if the ENTER (i.e. keycode <code>9</code> defined in <code>gmwp.conf</code>) key was pressed
					 * @see gmwp.conf
					 * @event gmwp.mod.Global#broadcastKeyEnter
					 */
					this.fire('broadcastKeyTab', { event: e }, ['broadcast']);
					break;

				case gmwp.conf.events.keyCode.LEFTARROW:
					/**
					 * Will fire an event if the ENTER (i.e. keycode <code>37</code> defined in <code>gmwp.conf</code>) key was pressed
					 * @see gmwp.conf
					 * @event gmwp.mod.Global#broadcastKeyEnter
					 */
					this.fire('broadcastKeyLeftArrow', { event: e }, ['broadcast']);
					break;

				case gmwp.conf.events.keyCode.RIGHTARROW:
					/**
					 * Will fire an event if the ENTER (i.e. keycode <code>39</code> defined in <code>gmwp.conf</code>) key was pressed
					 * @see gmwp.conf
					 * @event gmwp.mod.Global#broadcastKeyEnter
					 */
					this.fire('broadcastKeyRightArrow', { event: e }, ['broadcast']);
					break;
			}
		},

		/**
		 * Handler for global YouTube API ready event
		 *
		 * @memberOf gmwp.mod.Global
		 * @fires gmwp.mod.Global#broadcastYouTubeLoaded
		 */
		onYouTubeIframeAPIReady: function() {
			gmwp.YT = window.YT;
			this.fire('broadcastYouTubeLoaded', ['broadcast']);
		},

		/**
		 * Handler for global Brightcove API ready event
		 *
		 * @memberOf gmwp.mod.Global
		 * @fires gmwp.mod.Global#broadcastBrightcoveLoaded
		 */
		onBrightcoveAPIReady: function() {
			this.fire('broadcastBrightcoveLoaded', ['broadcast']);
		}
	});
})(gmwp.$);
// These are events that the browser fires, I define them here so that JSDocs can pick them up and connect them all together.
// Please move them to their respective `.on()` when it is defined in Global.js
/**
* <img src="https://web.archive.org/web/20200107071040/https://quantum.share.gm.com/PublishingImages/gmwp_event_listening.png"> touchStart Event
* @external touchStart
* @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events/touchstart|MDN touchStart Event}
* @see  {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch_events|MDN Touch Event Reference}
* @see  gmwp.mod.Global.onTouchStart
*/
/**
* <img src="https://web.archive.org/web/20200107071040/https://quantum.share.gm.com/PublishingImages/gmwp_event_listening.png"> touchEnd Event
* @external touchEnd
* @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events/touchend|MDN touchEnd Event}
* @see  {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch_events|MDN Touch Event Reference}
* @see  gmwp.mod.Global.onTouchEnd
*/
/**
* <img src="https://web.archive.org/web/20200107071040/https://quantum.share.gm.com/PublishingImages/gmwp_event_listening.png"> gestureStart Event
* @external gestureStart
* @see  {@link https://developer.apple.com/reference/webkitjs/gestureevent|Apple API Reference}
* @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events|MDN Event Reference}
* @see  gmwp.mod.Global.onGestureStart
*/
/**
* <img src="https://web.archive.org/web/20200107071040/https://quantum.share.gm.com/PublishingImages/gmwp_event_listening.png"> gestureEnd Event
* @external gestureEnd
* @see  {@link https://developer.apple.com/reference/webkitjs/gestureevent|Apple API Reference}
* @see  {@link https://developer.mozilla.org/en-US/docs/Web/Events|MDN Event Reference}
* @see  gmwp.mod.Global.onGestureEnd
*/

;(function($) {
	/**
	 * Popup module that is used for triggering A popup modal on the page
	 * @namespace gmwp.mod.Popup
	 * @description Popup is used to describe how Popup page events are fired and broadcast those
	 * events to all other modules.
	 *
	 * Here's an example of the event
		jQuery(document).trigger(
			jQuery.Event(
				'requestPopup',
				{
					form: {
						name: 'request a quote',
						url: 'https://web.archive.org/web/20200107071040/https://chevrolet.com.wpsegment9.sit.wpi.gm.com/content/chevrolet/na/us/en/testing-folder/ignitionOne.html',
						width: '70%'
					},
					vehicle: {
						'x-modelyear': '2018',
						'x-carline': 'traverse',
						'x-bodystyle': 'traverse'
					}
				}
			)
		);
	 * @author GMIT
	 */
	// jscs:disable maximumLineLength
	$.extend(true, gmwp.conf, {
		popup: {
			name: 'Popup',
			eventName: 'requestPopup',
			idSelector: '#content-modal',
			modalContainer: '.q-modal-content',
			modalIframeTPL: '<iframe width="100%" scrolling="no" frameBorder="0" src={{url}}></iframe>',
			modalHTML: '<div id="content-modal" class="q-mod q-mod-modal q-modal-popup reveal-modal reveal-popup no-title" data-reveal="true" role="dialog">' +
							'<a href="#close-popup" title="Close" class="close-reveal-modal stat-button-close" aria-label="Close" data-dtm="{{formName}}">' +
								'<img src="/etc/clientlibs/solar/img/placeholder_clear.png" alt="close" class="q-modal-close-icon">' +
							'</a>' +
							'<div class="q-modal-content"></div>' +
						'</div>',
			startSuffix: '-start',
			mutateConfig: {
				attributes: true,
				childList: true,
				subtree: true
			}
		}
	});
	// jscs:enable maximumLineLength

	gmwp.mod.Popup = gmwp.mod.Atomic.extend({
		/**
		 * This initializes the Popup Window settings and subscribes to a Popup sandbox
		 * @memberOf gmwp.mod.Popup
		 */
		init: function($ctx, sandbox, modId) {
			// Call base constructor
			this._super($ctx, sandbox, modId);

			gmwp.util.debug('-- LOADING MODULE: Popup :: ' + modId + ' --');

			this.cfg = gmwp.conf.popup;
			this.subscribe('broadcast', this);
		},

		prepare: function() {
			this.observer = null;
			this.$requestType = $();
			gmwp.dom.$document.on(
				gmwp.conf.popup.eventName, $.proxy(this.onRequestPopup, this)
			);

			// Grab the viewport on load to stop the forms from causing a "zoom"
			this.$viewport = $('meta[name="viewport"]');
			this.viewportContent = this.$viewport.attr('content');
		},
		onExternalSite: function(e) {
			var url = e.url,
			$popupContent = $('#external-popup-content-reveal');

			$popupContent.foundation('reveal', 'open');
			$popupContent.find('.q-popup-cont-button').attr('href', url);
			$popupContent.find('.q-popup-cont-button').off().on('click', function() {
				$popupContent.foundation('reveal', 'close');
			}).on('keypress', function(e) {
				if (e.keycode === '13') {
					e.preventdefault();
					$popupContent.foundation('reveal', 'close');
				}
			});
			$popupContent.find('.q-popup-close-button').off().on('click', function() {
				$popupContent.foundation('reveal', 'close');
			}).on('keypress', function(e) {
				if (e.keycode === '13') {
					e.preventdefault();
					$popupContent.foundation('reveal', 'close');
				}
			});

			$popupContent.off().on('click', function(e) {
				var popupId = 'external-popup-content-reveal';

				if (e.target.id === popupId) {
					$popupContent.foundation('reveal', 'close');
				}
			});
		},

		onRequestPopup: function(e) {
			var self = this,
				formName = e.form.name,
				vehicle = e.vehicle,
				width = e.form.width || '',
				url = e.form.url + (vehicle && '?' + gmwp.util.toQueryString(vehicle) || '');

			this.formStart = formName && formName.toDashSeparated() + self.cfg.startSuffix || '';

			// This sets a cookie for the legal disclaimer to check so that it won't open within
			// the popup.  This is needed because the entire site is framed within the popup
			gmwp.util.cookies.set(
				'Popup',
				true
			);

			if (!this.$modal) {
				gmwp.dom.$body.append(
					gmwp.util.compileTpl(
						{ formName: formName },
						gmwp.conf.popup.modalHTML
					)
				);
				this.$modal = $(gmwp.conf.popup.idSelector);
				this.$modalContainer = this.$modal.find(gmwp.conf.popup.modalContainer);
				gmwp.util.loadNewModules(this.$modal, this.sandbox);
			}

			this.$modal.css('width', width);
			this.$modalContainer
				.html(
					gmwp.util.compileTpl(
						{ url: url },
						gmwp.conf.popup.modalIframeTPL
					)
				)
				.find('iframe')
					.on('load', $.proxy(this.onContentLoad, this));

			gmwp.dom.$document
				.one('opened.fndtn.reveal', $.proxy(this.onModalOpen, this))
				.one('closed.fndtn.reveal', $.proxy(this.onModalClose, this));
		},

		onContentLoad: function(e) {
			this.$viewport.attr('content', this.viewportContent + ', maximum-scale=1');
			this.$modal.foundation('reveal', 'open');
			this.fire('broadcastRequestPopup', { event: e }, ['broadcast']);
			gmwp.util.track(this.formStart);

			// Find the instance of the form in the iframe
			this.$requestType = this.$modal
									.find('iframe')
										.contents()
											.find('.gmit-gf-request-type');

			this.$mainContent = this.$requestType
									.parentsUntil('body')
										.last();

			// Attach a listener to the form in case it changes sizes
			this.observer = new MutationObserver($.proxy(this.onMutation, this));
			this.observer.observe(
				this.$requestType.get(0),
				this.cfg.mutateConfig
			);
		},

		onModalOpen: function() {
			gmwp.dom.$html.addClass('popup-open');
			setTimeout($.proxy(this.adjustHeight, this), 250);
		},

		onModalClose: function() {
			gmwp.dom.$html.removeClass('popup-open');
			this.$viewport.attr('content', this.viewportContent);
		},

		onBroadcastWindowResize: function() {
			if (this.$modal) {
				this.adjustHeight();
			}
		},

		onMutation: function(list) {
			var self = this;

			$.each(list, function(index, mutation) {
				gmwp.util.debug('gwmp.mod.Popup::onMutation::mutation:', mutation);

				if (mutation.type === 'attributes' || mutation.type === 'childList') {
					gmwp.util.debug('adjustHeight');
					self.adjustHeight();
				}
			});
		},

		adjustHeight: function() {
			// Find the main content div height and make the modal adjust to that size
			this.$modal.height(
					this.$mainContent.outerHeight(true)
				);
		}
	});
})(gmwp.$);

;(function($) {
	'use strict';

	$.extend(true, gmwp.conf, {
		/**
		 * Global social configuration properties
		 * @namespace gmwp.conf.social
		 * @example
		 * if (gmwp.conf.social.email.enabled) {
		 * ...
		 * }
		 * @property {object} facebook
		 * @property {boolean} facebook.enabled true
		 * @property {object} twitter
		 * @property {boolean} twitter.enabled true
		 * @property {string} twitter.jsSDK '//web.archive.org/web/20200107071040/https://platform.twitter.com/widgets.js'
		 * @property {string} twitter.intentUrl 'https://web.archive.org/web/20200107071040/https://twitter.com/intent/tweet'
		 * @property {object} googleplus
		 * @property {boolean} googleplus.enabled true
		 * @property {string} googleplus.jsSDK '//web.archive.org/web/20200107071040/https://apis.google.com/js/plusone.js'
		 * @property {string} googleplus.shareUrl 'https://web.archive.org/web/20200107071040/https://plus.google.com/share?url={URL}'
		 * @property {object} pinterest
		 * @property {boolean} pinterest.enabled true
		 * @property {string} pinterest.jsSDK '//web.archive.org/web/20200107071040/https://assets.pinterest.com/sdk/sdk.js'
		 * @property {string} pinterest.initOptions
		 * @property {string} pinterest.initOptions.appId '4824882631789265593'
		 * @property {boolean} pinterest.initOptions.cookie true
		 * @property {object} email
		 * @property {boolean} email.enabled true
		 * @property {object} popup
		 * @property {string} popup.menubar 'no'
		 * @property {string} popup.toolbar 'no'
		 * @property {string} popup.resizable 'yes'
		 * @property {string} popup.scrollbars 'yes'
		 * @property {number} popup.height 600
		 * @property {number} popup.width 600
		 * @property {number} popup.top 150
		 * @property {number} popup.left 150
		 */
		social: {
			facebook: {
				shareUrl: 'https://web.archive.org/web/20200107071040/https://www.facebook.com/sharer/sharer.php?u={URL}'
			},
			twitter: {
				jsSDK: '//web.archive.org/web/20200107071040/https://platform.twitter.com/widgets.js',
				intentUrl: 'https://web.archive.org/web/20200107071040/https://twitter.com/intent/tweet'
			},
			googleplus: {
				jsSDK: 'https://web.archive.org/web/20200107071040/https://apis.google.com/js/plusone.js',
				shareUrl: 'https://web.archive.org/web/20200107071040/https://plus.google.com/share?url={URL}'
			},
			pinterest: {
				jsSDK: 'https://web.archive.org/web/20200107071040/https://assets.pinterest.com/sdk/sdk.js',
				initOptions: {
					appId: '4824882631789265593',
					cookie: true
				}
			},
			popup: {
				menubar: 'no',
				toolbar: 'no',
				resizable: 'yes',
				scrollbars: 'yes',
				height: 600,
				width: 600,
				top: 150,
				left: 150
			}
		}
	});

	/**
	 *
	 * @namespace gmwp.mod.Social
	 * @type {Object}
	 */
	gmwp.mod.Social = gmwp.mod.Atomic.extend({
		/**
		 * Call base constructor
		 * @memberOf gmwp.mod.Social
		 * @param  {Object} $ctx
		 * @param  {object} sandbox
		 * @param  {number} modId
		 */
		init: function($ctx, sandbox, modId) {
			// Call base constructor
			this._super($ctx, sandbox, modId);
		},

		/**
		 * What is this???
		 * @memberOf gmwp.mod.Social
		 */
		prepare: function() {
			$.extend(true, gmwp.util, {
				social: {
					/**
					 * [loadExternalScript description]
					 * @param  {string} url
					 * @param  {function} onDone
					 * @param  {function} onFail
					 * @memberOf gmwp.util.social
					 */
					loadExternalScript: function(url, onDone, onFail) {
						$.ajax({
							url: url,
							dataType: 'script',
							cache: true
						})
						.done($.proxy(onDone, this))
						.fail($.proxy(onFail, this));
					},

					/**
					 * [loadTwitter description]
					 * @memberOf gmwp.util.social
					 */
					loadTwitter: function() {
						this.loadExternalScript(
							gmwp.conf.social.twitter.jsSDK,
							this.initTwitter,
							this.loadScriptFail
						);
					},

					/**
					 * [loadGooglePlus description]
					 * @memberOf gmwp.util.social
					 */
					loadGooglePlus: function() {
						this.loadExternalScript(
							gmwp.conf.social.googleplus.jsSDK,
							this.initGooglePlus,
							this.loadScriptFail
						);
					},

					/**
					 * [loadPinterest description]
					 * @memberOf gmwp.util.social
					 */
					loadPinterest: function() {
						this.loadExternalScript(
							gmwp.conf.social.pinterest.jsSDK,
							this.initPinterest,
							this.loadScriptFail
						);
					},

					/**
					 * [initTwitter description]
					 * @memberOf gmwp.util.social
					 */
					initTwitter: function() {
					},

					/**
					 * [initGooglePlus description]
					 * @memberOf gmwp.util.social
					 */
					initGooglePlus: function() {
					},

					/**
					 * [initPinterest description]
					 * @memberOf gmwp.util.social
					 */
					initPinterest: function() {
						window.PDK.init(gmwp.conf.social.pinterest.initOptions);
					},

					/**
					 * [loadScriptFail description]
					 * @param  {string} xhr
					 * @param  {function} settings
					 * @param  {function} exception
					 * @memberOf gmwp.util.social
					 */
					loadScriptFail: function(xhr, settings, exception) {
						gmwp.util.error('gmwp.util.social ::', xhr, settings, exception);
					},

					/**
					 * [shareFb description]
					 * @param {object} options
					 * @memberOf gmwp.util.social
					 */
					shareFb: function(options) {
						window.open(
							gmwp.conf.social.facebook.shareUrl
								.replace('{URL}', encodeURIComponent(options.url)),
							'FacebookShare',
							this.popupOptions()
						);
					},

					/**
					 * [shareGp description]
					 * @param {object} options
					 * @memberOf gmwp.util.social
					 */
					shareGp: function(options) {
						window.open(
							gmwp.conf.social.googleplus.shareUrl
								.replace('{URL}', encodeURIComponent(options.url)),
							'gmwpGooglePlus',
							this.popupOptions()
						);
					},

					/**
					 * [tweet description]
					 * @param {object} options
					 * @memberOf gmwp.util.social
					 */
					tweet: function(options) {
						window.open(
							gmwp.conf.social.twitter.intentUrl +
							'?text=' + encodeURIComponent(options.description) +
							'&url=' + encodeURIComponent(options.url || ''),
							'gmwpTweet',
							this.popupOptions()
						);
					},

					/**
					 * [pin description]
					 * @param {object} options
					 * @memberOf gmwp.util.social
					 */
					pin: function(options) {
						window.PDK.pin(
							options.image,
							options.description || '',
							options.url || ''
						);
					},

					/**
					 * [share description]
					 * @param {object} options
					 * @memberOf gmwp.util.social
					 */
					share: function(options) {
						var channel = options.type.replace(/\-/gi, '');

						switch (channel) {
							case 'facebook':
								this.shareFb(options);
								break;

							case 'twitter':
								this.tweet(options);
								break;

							case 'googleplus':
								this.shareGp(options);
								break;

							case 'pinterest':
								this.pin(options);
								break;
						}
					},

					/**
					 * [popupOptions description]
					 * @param {object} options
					 * @memberOf gmwp.util.social
					 * @return {array}
					 */
					popupOptions: function(options) {
						var opts = $.extend(true, gmwp.conf.social.popup, options),
							tmp = '';

						// Calculate left position of window based on popup width
						// and user's screen width
						opts.left = (gmwp.util.screenWidth - opts.width) * 0.5;

						for (var prop in opts) {
							tmp += prop + '=' + opts[prop] + ',';
						}

						return tmp.replace(/,$/, '');
					},

					/**
					 * [loadScripts description]
					 * @memberOf gmwp.util.social
					 */
					loadScripts: function() {
						for (let channel in gmwp.conf.social) {
							const service = gmwp.conf.social[channel];

							if (service.enabled) {
								switch (channel) {
									case 'twitter':
										gmwp.util.social.loadTwitter();
										break;

									case 'googleplus':
										gmwp.util.social.loadGooglePlus();
										break;

									case 'pinterest':
										gmwp.util.social.loadPinterest();
										break;
								}
							}
						}
					}
				}
			});
		},

		finish: function() {
			// Check to see if social share component is on the page and if so load the SDK JS for each
			if (gmwp.conf.cmp.share && gmwp.$(gmwp.conf.cmp.share.modClass).length) {
				gmwp.util.social.loadScripts();
			}
		}
	});
})(gmwp.$);

//# sourceMappingURL=data:application/json;charset=utf8;base64,


}
/*
     FILE ARCHIVED ON 07:10:40 Jan 07, 2020 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 19:02:14 May 01, 2023.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 112.576
  exclusion.robots: 0.174
  exclusion.robots.policy: 0.157
  RedisCDXSource: 1.473
  esindex: 0.01
  LoadShardBlock: 81.595 (3)
  PetaboxLoader3.datanode: 76.459 (5)
  load_resource: 147.464 (2)
  PetaboxLoader3.resolve: 100.734 (2)
*/