var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");

/*
* This function is called after page load to initialize the date values in any booking widgets in the page
*/
jQuery(function() {

    /*
    * Retrieve all booking widgets and call the date initialization routine
    * This syntax says to retrieve all forms whose ID begins with 'BookingWidget'
    */
    var QueryResults = jQuery("form[id^='BookingWidget']").each(InitializeWidgetDate);

})

/*
* Generic Booking Widget Handler
*/

function WidgetHandler(formID, OnInitFunction) {

    // Form variables we are extracting
    var Hotel = "";
    var NumberOfChildren = "";
    var NumberOfNights = "";
    var NumberOfAdults = "";
    var StartDay = "";
    var StartMonth = "";
    var StartYear = "";       // OK if this field doesn't exist in form, we can use current year a default
    var RoomTypeCode = "";       // OK if this field doesn't exist in form, we can set a default value
    var BookingCode = "";       // OK if this field doesn't exist in form, we can set a default value

    // Prepend a '#' if there isn't one
    if (formID.charAt(0) != '#') formID = "#" + formID;

    // Get booking form by ID
    var SelectedForm = jQuery(formID);
    if (SelectedForm.length == 0) {
        alert("Missing or invalid booking form ID");
        return;
    }
    /*
    * If an init function was specified call it, it can set form fields based on actions and choices
    */
    if (OnInitFunction != undefined && typeof (OnInitFunction) == 'function') {
        OnInitFunction(SelectedForm);
    }

    // retrieve form items by classname within booking form

    // == Hotel
    var QueryResults = SelectedForm.find(".booking-hotel");
    if (QueryResults.length != 1) {
        alert("Missing or duplicate booking-hotel field");
        return;
    }
    Hotel = QueryResults[0].value;

    // == Number of adults
    QueryResults = SelectedForm.find(".booking-adults");
    if (QueryResults.length != 1) {
        alert("Missing or duplicate booking-adults field");
        return;
    }
    NumberOfAdults = QueryResults[0].value;

    // == Number of children
    QueryResults = SelectedForm.find(".booking-children");
    if (QueryResults.length != 1) {
        alert("Missing or duplicate booking-children field");
        return;
    }
    NumberOfChildren = QueryResults[0].value;

    // == Number of nights
    QueryResults = SelectedForm.find(".booking-nights");
    if (QueryResults.length != 1) {
        alert("Missing or duplicate booking-nights");
        return;
    }
    NumberOfNights = QueryResults[0].value;

    // There are different ways to get the date so note whether we retrieve it or not.
    var AlreadyHaveMonthDay = false;
    var AlreadyHaveYear = false;

    //----------------------------------------------------------
    // == Composite date (m,d or m,d,y) specified as a drop-down
    QueryResults = SelectedForm.find(".booking-dropdown-date");
    if (QueryResults.length > 1) {
        alert("Duplicate booking-dropdown-date fields");
        return;
    }
    if (QueryResults.length == 1) {
        /*
        * Decode the value in the select as m,d or m,d,yy or m,d,yyyy
        */
        var dateparts = QueryResults[0].value.split(",");
        if (dateparts.length <= 1 || dateparts.length > 3) {
            alert("Incorrect format in booking-dropdown-date. use m,d or m,d,y");
            return;
        }
        /*
        * Get month and day
        */
        StartMonth = dateparts[0];
        StartDay = dateparts[1];
        AlreadyHaveMonthDay = true;         // Note that we have this now
        /*
        * If the year was specified pull it, otherwise retrieve it later
        */
        if (dateparts.length == 3) {
            StartYear = dateparts[2];
            if (StartYear.length == 4) StartYear = StartYear.substring(2, 4);    // for year we really only want the last 2 digits.
            AlreadyHaveYear = true;         // Note that we have this now
        }
    }

    //--------------------------------------------------------------------
    // == Composite date (m,d or m,d,y) specified as a list of radio items
    QueryResults = SelectedForm.find(".booking-radio-date");
    if (!AlreadyHaveMonthDay && QueryResults.length > 0) {
        /*
        * Find the checked item. There must be one and only one value checked, otherwise its an error. Note that it is expected
        * for there to be multiple radio items with the same class name, just that only one will be checked.
        */
        QueryResults = QueryResults.filter(":checked");
        if (QueryResults.length != 1) {
            alert("No date selected or multiple dates selected in .booking-radio-date");
            return;
        }
        /*
        * Decode the value in the select as m,d or m,d,yy or m,d,yyyy
        */
        var dateparts = QueryResults[0].value.split(",");
        if (dateparts.length <= 1 || dateparts.length > 3) {
            alert("Incorrect format in booking-radio-date. use m,d or m,d,y");
            return;
        }
        /*
        * Get month and day
        */
        StartMonth = dateparts[0];
        StartDay = dateparts[1];
        AlreadyHaveMonthDay = true;         // Note that we have this now

        /*
        * If the year was specified pull it, otherwise need to retrieve it or use default of this year
        */
        if (dateparts.length == 3) {
            StartYear = dateparts[2];
            if (StartYear.length == 4) StartYear = StartYear.substring(2, 4);    // for year we really only want the last 2 digits.
            AlreadyHaveYear = true;         // Note that we have this now
        }
    }
    /*
    * We may or may not have been able to extract the date via composite drop-downs or radio boxes, check here 
    * and if needed pull it from m/d/y dropdowns
    */
    if (!AlreadyHaveMonthDay) {
        // == Starting Day
        QueryResults = SelectedForm.find(".booking-startday");
        if (QueryResults.length != 1) {
            alert("Missing or duplicate booking-startday field");
            return;
        }
        StartDay = QueryResults[0].value + "";      // Append a null string to force type to string, other wise '01' becomes '1'

        // == Starting Month
        QueryResults = SelectedForm.find(".booking-startmonth");
        if (QueryResults.length != 1) {
            alert("Missing or duplicate booking-startmonth field");
            return;
        }
        StartMonth = QueryResults[0].value;
    }
    /* // == Starting Year
    * If we haven't already gotten the year from a composite radio or composite dropdown get it now. 
    */
    if (!AlreadyHaveYear) {
        /*
        * Starting year. If this isn't specified use the current year.
        */
        QueryResults = SelectedForm.find(".booking-startyear");
        if (QueryResults.length == 0) {
            var d = new Date();
            StartYear = d.getFullYear();            // Use default of this year
        } else if (QueryResults.length == 1) {
            StartYear = QueryResults[0].value;
        } else {
            alert("Duplicate booking-startyear field");
            return;
        }
        if (StartYear.length == 4) StartYear = StartYear.substring(2, 4);    // for year we really only want the last 2 digits.           
    }

    // == Room Type Code. Ok if this field doesn't exist. However, don't allow multiple instances
    QueryResults = SelectedForm.find(".booking-roomtypecode");
    if (QueryResults.length == 0) {
        RoomTypeCode = "001";                       // Default value if no field specified
    } else if (QueryResults.length == 1) {
        RoomTypeCode = QueryResults[0].value;       // Retrieve value from form
    } else {
        // Duplicate instances
        alert("duplicate instances of booking-roomtypecode");
        return;
    }
    /*
    * There are two ways to get the booking code, either via a hidden fields or a set of radio boxes
    */
    var AlreadyHaveBookingCode = false;

    //--------------------------------------------------------------------
    // == Booking Codes specified as a series of radio items
    QueryResults = SelectedForm.find(".booking-radio-bookingcode");
    if (QueryResults.length > 0) {
        /*
        * Find the checked item. There must be one and only one value checked, otherwise its an error. Note that it is expected
        * for there to be multiple radio items with the same class name, just that only one will be checked.
        */
        QueryResults = QueryResults.filter(":checked");
        if (QueryResults.length != 1) {
            alert("No code selected or multiple codes selected in .booking-radio-bookingcode");
            return;
        }
        /*
        * Get the booking code
        */
        BookingCode = QueryResults[0].value;

        AlreadyHaveBookingCode = true;         // Note that we have this now       
    }

    // == Booking Code. Ok if this field doesn't exist. We may already have it from a set of radio options
    if (!AlreadyHaveBookingCode) {
        QueryResults = SelectedForm.find(".booking-bookingcode");
        if (QueryResults.length == 0) {
            BookingCode = "NET";                       // Default value if no field specified
        } else if (QueryResults.length == 1) {
            BookingCode = QueryResults[0].value;       // Retrieve value from form
        } else {
            // Duplicate instances
            alert("duplicate instances of booking-bookingcode");
            return;
        }
    }



	// == checking for min required number of occupants 
	if (NumberOfAdults == 0) {
			alert("You must have at least one adult per room");
			return;
		} 
	// == adding up adults and children to get total accupants
	var TotalNumberOfOccupants = parseInt(NumberOfChildren) + parseInt(NumberOfAdults);
		// getting min number of accupants requred for room or package
		QueryResults = SelectedForm.find(".booking-min-number-occupants");
		if (QueryResults.length === 0) {
			var MinNumberOfOccupants = "1";
		} else {
			MinNumberOfOccupants = 	QueryResults[0].value;
		}
		if (TotalNumberOfOccupants < MinNumberOfOccupants) {
			alert("This package requires a minimum of " + MinNumberOfOccupants + " occupants.");
			return;	
		}
	
	
    // See if we are debugging. If not redirect to the url

    var Debug = SelectedForm.find(".booking-debugwidget");

    if (Debug.length == 0) {
        GoToBooking(Hotel, StartMonth, StartDay, StartYear, NumberOfNights, NumberOfAdults, NumberOfChildren, BookingCode, RoomTypeCode);
    } else {
        Debug.html("Hotel is " + Hotel
            + "<br/> Number of Children is " + NumberOfChildren
            + "<br/> Number of Adults is " + NumberOfAdults
	+ "<br/> Total number of Occupants is " + TotalNumberOfOccupants
            + "<br/> Number of Nights is " + NumberOfNights
			+ "<br/> Min Number of Occupants is " + MinNumberOfOccupants
            + "<br/> Start Month is " + StartMonth
            + "<br/> Start Day is " + StartDay
            + "<br/> Start Year is " + StartYear
            + "<br/> Room Type Code is " + RoomTypeCode
            + "<br/> Booking Code is " + BookingCode
            + "<br/> URL is " + GetBookingLink(Hotel, StartMonth, StartDay, StartYear, NumberOfNights, NumberOfAdults, NumberOfChildren, BookingCode, RoomTypeCode)
            );
    }
}

/*====================================================================
* This entry point will form the url used to call the booking engine. 
* It is used internally but can also be called directly.
*/
function GetBookingLink(Hotel, StartMonth, StartDay, StartYear, NumberOfNights, NumberOfAdults, NumberOfChildren, BookingCode, RoomTypeCode) {
    /*
    * Build the url string 
    */
    var url =
	    "https://" +
	    GetDomainName(Hotel) + "/cgi-bin/lansaweb?procfun+rn+resnet+" +
	    GetPartition(Hotel) + "+funcparms+UP(A2560)%3A%3B" +
	    BookingCode + "%3B" +
	    StartMonth + StartDay + StartYear + "%3B" +
	    NumberOfNights + "%3B" +
	    NumberOfAdults + "%3B" +
	    NumberOfChildren + "%3B" +
	    RoomTypeCode + "%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3B%3F";

    return url;
}
/*====================================================================
* This entry point will call the booking engine
* It is used internally but can also be called directly.
*/


function GoToBooking(Hotel, StartMonth, StartDay, StartYear, NumberOfNights, NumberOfAdults, NumberOfChildren, BookingCode, RoomTypeCode) {
    var url = GetBookingLink(Hotel, StartMonth, StartDay, StartYear, NumberOfNights, NumberOfAdults, NumberOfChildren, BookingCode, RoomTypeCode);
    document.location.href = url;
}

// Get the name of the partition for this hotel
function GetPartition(Hotel) {
    switch (Hotel) {
        case "GON": return "nsh";
        case "GPH": return "orl";
        case "GTX": return "tex";
        case "GNA": return "nat";

    }
    return "Invalid Hotel: " + Hotel;
}

// Get the name of the domain name to route to based on the hotel
function GetDomainName(Hotel) {
    switch (Hotel) {
        case "GON": return "reservations.oprylandhotels.com";
        case "GPH": return "reservations.gaylordpalms.gaylordhotels.com";
        case "GTX": return "reservations.texas.gaylordhotels.com";
        case "GNA": return "reservations.gaylordnational.gaylordhotels.com";

    }
    return "Invalid Hotel: " + Hotel;
}


/*=======================================================================================
* This function is called from jquery initialization for each booking widget on a page to initialize the date field
* This is called from a jQuery each() method, so it has an index and the form element as arguments
*/
function InitializeWidgetDate(ndx, FormElment) {


    // Wrap the form element in a jQuery object
    var jqForm = jQuery(this);

    //----------------------------------------------------------
    // == Composite date (m,d or m,d,y) specified as a drop-down. If there is an error just return. Since
    // == this is called during initialization we don't want a bunch of alert boxes popping up, the error
    // == will be caught when the form is submitted
    var jqDateDropDown = jqForm.find(".booking-dropdown-date");
   
    if (jqDateDropDown.length > 1) return;               // Duplicates, return

    if (jqDateDropDown.length == 1) {
        /*
        * Loop through each item, deleting the ones that are in the past
        */
        jqDateDropDown.children().each(DeletePastSelectItem);
        /*
        * Return, the same form shouldn't have both a drop-down composite list and individual drop-downs
        */
        return;
    }

    /*--------------------------------------------------------------
    * == There might be a set of radio options to specify the date. In that case return, we can't really do anything there
    * == The reason is that we could find radio options that are out of date but we can't be certain we can get any
    * == container for them, labels and such, without a defined protocol.
    */
    var jqDateRadio = jqForm.find(".booking-radio-date");
    if (jqDateRadio.length > 0) return;


    /*----------------------------------------------------------------
    * == If we are here then then there are dropdowns for m/d. In that case we want to select the 
    * == month current day in the dropdowns, and possibly limit the selections in the drop-downs to
    * == items specified in XML data islands, if they exist
    */

    /*
     * try to retrieve an XML data island with valid days for each month. ok if it doesn't exist
     */
    var jqDaysInMonth = GetXMLDataIsland(jqForm);
    
    var CheckDaysInMonth = jqDaysInMonth.length == 1 ? true : false;

    // == Set Starting Month and remove any months not in the xml data island, if there is one.
    var jqMonth = jqForm.find(".booking-startmonth");

    if (jqMonth.length != 1) return;

    var Now = new Date();       // Get today's date
    var DefaultMonthIndex = 0;
    var DefaultMonthName = "JAN";
    /*
    * Loop through the month drop-down, removing any months that are not in the XML data island and setting the default month
    */
    jqMonth.children().each(function(ndx, oElement) {

        var jqOption = jQuery(oElement);
        var monthname = jqOption.text();
        var monthindex = Number(jqOption[0].value);
        /*
        * If there is a month in the drop-down that doesn't exist in the XML remove it
        */
        var jq = jqDaysInMonth.find(monthname.toLowerCase());

        if (CheckDaysInMonth && (jq.length == 0)) {
            jqOption.remove();
        } else {
            /*
            * If the current <option> month is greater than *or equal* to the current calendar month set it as the default.
            * This will only execute once, so it will work in the case where the current month is present or was deleted;
            * the first month we find *starting* with the current month becomes the default. If there are no months after the
            * current calendar month the first option in the select remains the default.
            */
            if ((DefaultMonthIndex == 0) && (monthindex >= Now.getMonth() + 1)) {
                DefaultMonthIndex = monthindex;
                DefaultMonthName = monthname;           // Set default name for next step in processing.
                jqOption.attr("selected", "selected");
            }
        }
    });
    /*
    * Ok, now that we've set the default month we should initialize the days drop-down to the appropriate values from the xml island,
    * if it exists (ok for xml island to not be present)
    */
    InitializeDayDropDownFromXML(jqForm, DefaultMonthName);

    /*
    * Set the default day. If the default month isn't the current calendar month return, nothing to do.
    */
    if (DefaultMonthIndex != Now.getMonth() + 1) return;
    /*
    * The default month is the current calendar month. Set the default day to the first day that is greater than or equal to today
    * If the current day is missing from the xml data island we'll set to the first day after that.
    */
    // == Starting Day
    var jqDay = jqForm.find(".booking-startday");
    if (jqDay.length != 1) return;

    var DefaultDayIndex = 0;

    jqDay.children().each(function(ndx, oElement) {
        var jqOption = jQuery(oElement);
        var dayindex = Number(jqOption[0].value);
        /*
        * If the current <option> day is greater than *or equal* to the current calendar day set it as the default.
        * This will only execute once, so it will work in the case where the current day is present or was deleted;
        * the first day we find *starting* with the current day becomes the default. If there are no days after the
        * current calendar day the first option in the select remains the default.
        */
        if ((DefaultDayIndex == 0) && (dayindex >= Now.getDate())) {
            DefaultDayIndex = dayindex;
            jqOption.attr("selected", "selected");
        }
    });
    /*
    * Finished
    */
    return;

}
/*========================================================================
 * Retrieve the XML data island with the list of valid days for each month
 * If this is IE we have to wrap it in a DOM Document and then rewrap it in a jQuery object,
 * Otherwise child searches don't work.
 */
function GetXMLDataIsland(jqForm) {

    var jqDaysInMonth = jqForm.find(".booking-daysinmonth");
    if (jqDaysInMonth.length == 0) return jqDaysInMonth;
   
   /*
    * If this is IE create an XMLDocument object out of it
    */
    if (jQuery.browser.msie) {
        var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
        xmlDoc.loadXML("<xml>" + jqDaysInMonth[0].innerHTML + "</xml>");
        jqDaysInMonth = jQuery(xmlDoc);
    }

    return jqDaysInMonth;
}

/*=====================================
* This function uses the XML data island to collect the set of valid days for the specified month and initialize
* the day drop-down with them. Its ok if the data island doesn't exist, in that case the day dropdown won't be set
* This function is called from initialization and from the onchange() event associated with the month dropdown
*/
function InitializeDayDropDownFromXML(jqForm, monthname) {
    /*
    * See if we are in a leap year
    */
    var Now = new Date();
    
    var isLeapYear = new Date(Now.getFullYear(), 1, 29).getMonth() == 1;

    // Locate the element in the xml data island that contains the valid days for this month
    var jqDaysInMonth = GetXMLDataIsland(jqForm).find(monthname.toLowerCase());
    
    if (jqDaysInMonth.length == 0) return;  // ok if this doesn't exist

    // Break into a list of days
    var daylist = jqDaysInMonth.text().split(",");
    var jqDaySelect = jqForm.find(".booking-startday");
    /*
    * Delete the options for this select and repopulate them with the appropriate values from the daylist
    */
    jqDaySelect.find("option").remove();
    for (ii = 0; ii < daylist.length; ii++) {

        // Get value, ignore blank or null entries. This will tolerate syntax like ",3,,5," or ",  3 ,  6 ,"
        var thisday = jQuery.trim(daylist[ii]);
        if (thisday == "") continue;
        /*
        * SPECIAL CASE: If this is february 29 and this is not a leap year don't add the 29th
        */
        if (monthname == "FEB" && thisday == "29" && !isLeapYear) continue;

        // make sure that single digits have a leading '0'
        if (thisday.length == 1) thisday = "0" + thisday;
        // Append this 'option' statement
        jqDaySelect.append("<option value='" + thisday + "'>" + thisday + "</option>");
    }
    /*
    * Finished
    */
    return;
}


/*=======================================================================================================
* This function is called after page load through jQuery for each item in a select statement that is part 
* of a list of drop-down dates. If the date is in the past delete the item
*/
function DeletePastSelectItem(ndx, OptionElement) {

    // Wrap this option tag in a jQuery object
    var QueryResults = jQuery(this);

    var Now = new Date();                  // Get today's date
    var StartYear = Now.getFullYear();     // Default to current year

    var StartMonth = 0;
    var StartDay = 0;

    // Decode date, can be either m,d or m,d,yy or m,d,yyyy

    var dateparts = QueryResults[0].value.split(",");
    if (dateparts.length <= 1 || dateparts.length > 3) {
        return;         // error, format should be m,d or m,d,y. Don't report here since this is during page load
    }
    /*
    * Get month and day as numbers
    */
    StartMonth = Number(dateparts[0]);
    StartDay = Number(dateparts[1]);
    /*
    * If the year was specified pull it and make sure its a number and a 4 digit value
    */
    if (dateparts.length == 3) {
        StartYear = Number(dateparts[2]);
        if (StartYear < 2000) StartYear += 2000;

    }
    /*
    * Is this select item in the past? If so delete it
    */

    // See if this is next year
    if (StartYear > Now.getFullYear()) return;     // this is next year, its ok

    // We are in the current year. If this a future month its ok
    if (StartMonth > (Now.getMonth() + 1)) return;     // This is a future month its ok

    // If this is the current month but today or in the future its ok
    if (StartMonth == (Now.getMonth() + 1) && StartDay >= Now.getDate()) return;

    // This is either a previous year, previous month or previous day in this month. Remove it             
    QueryResults.remove();

    /*
    * Finished
    */
    return;
}

/*===========================================================================================================
* This function is called by the monthly <select> tags on an 'onchange' event. It will use the XML data island containing the set of
* valid days for each month to initialize the days valid for that month.
*/
function WidgetMonthChange(MonthSelect) {
    /*
    * Get this <select> and the containing form
    */
    var jqMonthSelect = jQuery(MonthSelect);
    var jqForm = jqMonthSelect.closest("form");
    if (jqForm.length == 0) {
        alert("Unable to find containing form for Month Drop-Down");
        return;
    }

    // Get the selected month     
    var jqSelectedMonth = jqMonthSelect.find("option:selected");
    // Get the month name
    var MonthName = jqSelectedMonth.text();
    /*
    * Rewrite the day drop-down so that it contains the days that are valid for this month
    */
    InitializeDayDropDownFromXML(jqForm, MonthName);
    /*
    * Finished
    */
    return;
}

/*
    
The XML data island has the format:
<xml style="display:none" class="booking-daysinmonth">
<jan>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31 </jan>
<feb>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29 </feb>
<mar>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31  </mar> 
<apr>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30</apr> 
<may>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31 </may> 
<jun>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30</jun> 
<jul>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31  </jul> 
<aug>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31  </aug> 
<sep>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30  </sep> 
<oct>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31  </oct> 
<nov>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30  </nov> 
<dec>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31  </dec> 
</xml>
    
Month nodes can be removed, and individual days within a month node can be removed and the month and day dropdowns will reflect that.
*/

}
/*
     FILE ARCHIVED ON 21:39:42 Jan 02, 2013 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 07:39:00 Apr 30, 2023.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 60.774
  exclusion.robots: 0.065
  exclusion.robots.policy: 0.056
  cdx.remote: 0.051
  esindex: 0.009
  LoadShardBlock: 35.092 (3)
  PetaboxLoader3.datanode: 43.918 (4)
  load_resource: 75.155
  PetaboxLoader3.resolve: 60.673
*/